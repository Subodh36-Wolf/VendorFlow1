{"version":3,"file":"static/js/196.40df7a63.chunk.js","mappings":"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","sources":["components/Admin/StatusManager.jsx"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { collection, getDocs, getDoc, doc, updateDoc, addDoc, query, where, orderBy, serverTimestamp, writeBatch } from 'firebase/firestore';\nimport { db } from '../../firebase';\nimport { useNotification } from './NotificationSystem';\nimport { useAuth } from '../../context/AuthContext';\nimport { \n  FiCheckCircle, FiClock, FiAlertCircle, FiXCircle, FiEdit2, \n  FiUser, FiFileText, FiCalendar, FiFilter, FiSearch, FiRefreshCw,\n  FiActivity, FiEye, FiTrendingUp, FiArrowRight, FiPlay, FiPause,\n  FiCheck, FiX, FiCpu, FiZap, FiTarget, FiBell,\n  FiGrid, FiList, FiMoreVertical, FiChevronDown, FiChevronUp,\n  FiDownload, FiUpload, FiSettings, FiSliders, FiMaximize2,\n  FiMinimize2, FiMenu, FiPhone, FiTablet, FiMonitor,\n  FiTool, FiPackage, FiTruck, FiBarChart2, FiPlus, FiMinus\n} from 'react-icons/fi';\n\n// Machine operations with detailed configuration\nconst MACHINE_OPERATIONS = {\n  HBL: { name: 'Horizontal Boring', icon: FiTool, color: 'blue' },\n  VTL: { name: 'Vertical Turning', icon: FiCpu, color: 'purple' },\n  Drilling: { name: 'Drilling', icon: FiZap, color: 'green' },\n  VMC: { name: 'Vertical Machining', icon: FiTarget, color: 'indigo' }\n};\n\n// Operation Status Service (atomic & auditable)\nconst updatePOOperationStatusService = async (poId, operation, newStatus, user, notes = '') => {\n  try {\n    const poRef = doc(db, 'purchaseOrders', poId);\n    const poSnap = await getDoc(poRef);\n    if (!poSnap.exists()) throw new Error('Purchase order not found');\n\n    const currentData = poSnap.data() || {};\n    const currentStatus = currentData.operationsStatus?.[operation] || 'pending';\n\n    // Build updated maps\n    const updatedOperationsStatus = {\n      ...(currentData.operationsStatus || {}),\n      [operation]: newStatus,\n    };\n\n    // Calculate progress and derived status\n    const totalOperations = Object.keys(MACHINE_OPERATIONS).length;\n    const completedOperations = Object.values(updatedOperationsStatus).filter((s) => s === 'completed').length;\n    const progress = Math.round((completedOperations / totalOperations) * 100);\n    let derivedStatus = currentData.status || 'pending';\n    if (completedOperations === totalOperations) derivedStatus = 'completed';\n    else if (completedOperations > 0 || Object.values(updatedOperationsStatus).some((s) => s === 'in_progress')) derivedStatus = 'in_progress';\n\n    const batch = writeBatch(db);\n\n    // Build per-operation meta\n    const baseMeta = {\n      status: newStatus,\n      notes: notes || '',\n      updatedAt: serverTimestamp(),\n      updatedBy: {\n        uid: user?.uid || null,\n        email: user?.email || null,\n        name: user?.displayName || null,\n      },\n    };\n    const extraMeta = {};\n    if (newStatus === 'in_progress') extraMeta.startedAt = serverTimestamp();\n    if (newStatus === 'completed') extraMeta.completedAt = serverTimestamp();\n\n    batch.update(poRef, {\n      operationsStatus: updatedOperationsStatus,\n      [`operationsMeta.${operation}`]: { ...(currentData.operationsMeta?.[operation] || {}), ...baseMeta, ...extraMeta },\n      status: derivedStatus,\n      progress,\n      updatedAt: serverTimestamp(),\n    });\n\n    // Propagate to related entities (relational updates)\n    // 1) Delivery Challans linked by poId\n    try {\n      const dcsSnap = await getDocs(\n        query(collection(db, 'deliveryChallans'), where('poId', '==', poId))\n      );\n      dcsSnap.forEach((dcDoc) => {\n        batch.update(doc(db, 'deliveryChallans', dcDoc.id), {\n          poStatus: derivedStatus,\n          poProgress: progress,\n          updatedAt: serverTimestamp(),\n        });\n      });\n    } catch (e) {\n      console.warn('DC propagation skipped/failed:', e?.message || e);\n    }\n\n    // 2) Job Assignments linked by poId or reference == poNumber\n    const mapPOToJobStatus = (poStatus) => {\n      switch (poStatus) {\n        case 'completed':\n          return 'completed';\n        case 'in_progress':\n          return 'in-progress';\n        case 'pending':\n        default:\n          return 'assigned';\n      }\n    };\n\n    try {\n      const updates = [];\n      // By poId\n      const jobsByPoId = await getDocs(\n        query(collection(db, 'jobAssignments'), where('poId', '==', poId))\n      );\n      jobsByPoId.forEach((j) => updates.push(j.id));\n\n      // Fallback by reference == poNumber (if present)\n      const poNumber = currentData.poNumber;\n      if (updates.length === 0 && poNumber) {\n        const jobsByRef = await getDocs(\n          query(collection(db, 'jobAssignments'), where('reference', '==', poNumber))\n        );\n        jobsByRef.forEach((j) => updates.push(j.id));\n      }\n\n      const jobStatus = mapPOToJobStatus(derivedStatus);\n      updates.forEach((jobId) => {\n        batch.update(doc(db, 'jobAssignments', jobId), {\n          status: jobStatus,\n          updatedAt: serverTimestamp(),\n        });\n      });\n    } catch (e) {\n      console.warn('Job propagation skipped/failed:', e?.message || e);\n    }\n\n    // History record\n    const historyRef = doc(collection(db, 'operationHistory'));\n    batch.set(historyRef, {\n      itemId: poId,\n      itemType: 'po_operation',\n      operation,\n      oldStatus: currentStatus,\n      newStatus,\n      notes: notes || '',\n      userId: user?.uid || null,\n      userName: user?.displayName || user?.email || 'Unknown',\n      timestamp: serverTimestamp(),\n    });\n\n    await batch.commit();\n    return true;\n  } catch (error) {\n    console.error('Error in operation status service:', error);\n    throw error;\n  }\n};\n\n// Operation Tracker Component\nconst OperationTracker = ({ item, history, onClose, getStatusColor, getStatusIcon, getVendorName }) => {\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6 border-b border-gray-200 flex justify-between items-center\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Operation History - {item.poNumber}</h2>\n          <button onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\n            <FiX size={24} />\n          </button>\n        </div>\n        \n        <div className=\"p-6\">\n          <div className=\"mb-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-500\">Vendor</h3>\n              <p className=\"text-lg font-medium\">{getVendorName(item.vendorId)}</p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-500\">Current Status</h3>\n              <p className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(item.status)}`}>\n                {getStatusIcon(item.status)}\n                <span className=\"ml-1 capitalize\">{item.status?.replace('_', ' ')}</span>\n              </p>\n            </div>\n          </div>\n          \n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Operation Timeline</h3>\n          \n          {history.length > 0 ? (\n            <div className=\"space-y-4\">\n              {history.map((record, index) => (\n                <div key={record.id || index} className=\"flex\">\n                  <div className=\"flex flex-col items-center mr-4\">\n                    <div className={`w-3 h-3 rounded-full ${\n                      record.newStatus === 'completed' ? 'bg-green-500' :\n                      record.newStatus === 'in_progress' ? 'bg-blue-500' :\n                      record.newStatus === 'pending' ? 'bg-yellow-500' : 'bg-gray-500'\n                    }`}></div>\n                    {index < history.length - 1 && (\n                      <div className=\"w-0.5 h-16 bg-gray-300 my-1\"></div>\n                    )}\n                  </div>\n                  <div className=\"flex-1 pb-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {MACHINE_OPERATIONS[record.operation]?.name || record.operation}\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        {record.timestamp?.toDate?.().toLocaleString() || 'N/A'}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Changed from <span className=\"font-medium\">{record.oldStatus}</span> to <span className=\"font-medium\">{record.newStatus}</span>\n                      {record.notes && ` - ${record.notes}`}\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">By: {record.userName}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No history available for this operation\n            </div>\n          )}\n        </div>\n        \n        <div className=\"p-6 border-t border-gray-200 flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Status Update Modal Component\nconst StatusUpdateModal = ({ isOpen, onClose, operation, currentStatus, onStatusUpdate }) => {\n  const [notes, setNotes] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState(currentStatus);\n  const [updating, setUpdating] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedStatus(currentStatus);\n      setNotes('');\n    }\n  }, [isOpen, currentStatus]);\n\n  const handleSubmit = async () => {\n    if (selectedStatus === currentStatus) {\n      onClose();\n      return;\n    }\n\n    setUpdating(true);\n    try {\n      await onStatusUpdate(selectedStatus, notes);\n      onClose();\n    } catch (error) {\n      console.error('Error updating status:', error);\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-xl max-w-md w-full\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Update Operation Status</h2>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {MACHINE_OPERATIONS[operation]?.name || operation}\n          </p>\n        </div>\n        \n        <div className=\"p-6 space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              <button\n                onClick={() => setSelectedStatus('pending')}\n                className={`p-3 rounded-lg border text-center ${\n                  selectedStatus === 'pending'\n                    ? 'bg-yellow-100 border-yellow-500 text-yellow-700'\n                    : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                <FiClock className=\"mx-auto mb-1\" />\n                <span className=\"text-xs\">Pending</span>\n              </button>\n              <button\n                onClick={() => setSelectedStatus('in_progress')}\n                className={`p-3 rounded-lg border text-center ${\n                  selectedStatus === 'in_progress'\n                    ? 'bg-blue-100 border-blue-500 text-blue-700'\n                    : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                <FiPlay className=\"mx-auto mb-1\" />\n                <span className=\"text-xs\">In Progress</span>\n              </button>\n              <button\n                onClick={() => setSelectedStatus('completed')}\n                className={`p-3 rounded-lg border text-center ${\n                  selectedStatus === 'completed'\n                    ? 'bg-green-100 border-green-500 text-green-700'\n                    : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                }`}\n              >\n                <FiCheckCircle className=\"mx-auto mb-1\" />\n                <span className=\"text-xs\">Completed</span>\n              </button>\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Notes (Optional)</label>\n            <textarea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Add any notes about this status change...\"\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n              rows={3}\n            />\n          </div>\n        </div>\n        \n        <div className=\"p-6 border-t border-gray-200 flex justify-end space-x-3\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n            disabled={updating}\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSubmit}\n            disabled={updating || selectedStatus === currentStatus}\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center\"\n          >\n            {updating ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Updating...\n              </>\n            ) : (\n              'Update Status'\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function StatusManager() {\n  const { showSuccess, showError } = useNotification();\n  const { currentUser } = useAuth();\n  const [jobs, setJobs] = useState([]);\n  const [pos, setPOs] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [updating, setUpdating] = useState({});\n  const [activeTab, setActiveTab] = useState('operations');\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [showTracker, setShowTracker] = useState(false);\n  const [operationHistory, setOperationHistory] = useState([]);\n  const [filters, setFilters] = useState({\n    status: 'all',\n    operation: 'all',\n    search: '',\n    dateRange: 'all',\n    vendor: 'all'\n  });\n  const [viewMode, setViewMode] = useState('table');\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [isMobile, setIsMobile] = useState(false);\n  const [sortConfig, setSortConfig] = useState({ key: 'createdAt', direction: 'desc' });\n  const [autoRefresh, setAutoRefresh] = useState(false);\n  const refreshIntervalRef = useRef(null);\n  const [completedOperations, setCompletedOperations] = useState([]);\n  const [vendorPerformance, setVendorPerformance] = useState({});\n  const [statusUpdateModal, setStatusUpdateModal] = useState({\n    isOpen: false,\n    poId: null,\n    operation: null,\n    currentStatus: null\n  });\n\n  useEffect(() => {\n    try {\n      const saved = localStorage.getItem('statusManagerFilters');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        setFilters(prev => ({ ...prev, ...parsed }));\n      }\n    } catch {}\n\n    fetchData();\n    \n    // Check if mobile\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    \n    return () => {\n      window.removeEventListener('resize', checkMobile);\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (autoRefresh) {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n      refreshIntervalRef.current = setInterval(fetchData, 30000);\n    } else {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n        refreshIntervalRef.current = null;\n      }\n    }\n    return () => {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n    };\n  }, [autoRefresh]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('statusManagerFilters', JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  // Calculate vendor performance metrics\n  useEffect(() => {\n    if (pos.length > 0 && vendors.length > 0) {\n      const performance = {};\n      \n      vendors.forEach(vendor => {\n        const vendorPOs = pos.filter(po => po.vendorId === vendor.id);\n        const completedOps = [];\n        \n        vendorPOs.forEach(po => {\n          Object.entries(po.operationsStatus || {}).forEach(([operation, status]) => {\n            if (status === 'completed') {\n              completedOps.push({\n                poNumber: po.poNumber,\n                operation,\n                completionDate: po.updatedAt || po.createdAt,\n                vendor: vendor.name\n              });\n            }\n          });\n        });\n        \n        performance[vendor.id] = {\n          name: vendor.name,\n          totalPOs: vendorPOs.length,\n          totalOperations: completedOps.length,\n          completedOperations: completedOps,\n          efficiency: vendorPOs.length > 0 \n            ? (completedOps.length / (vendorPOs.length * Object.keys(MACHINE_OPERATIONS).length)) * 100 \n            : 0,\n          averageCompletionTime: calculateAverageCompletionTime(vendorPOs)\n        };\n      });\n      \n      setVendorPerformance(performance);\n      setCompletedOperations(\n        Object.values(performance)\n          .flatMap(v => v.completedOperations)\n          .sort((a, b) => new Date(b.completionDate) - new Date(a.completionDate))\n      );\n    }\n  }, [pos, vendors]);\n\n  const calculateAverageCompletionTime = (vendorPOs) => {\n    let totalTime = 0;\n    let count = 0;\n    \n    vendorPOs.forEach(po => {\n      Object.entries(po.operationsMeta || {}).forEach(([operation, meta]) => {\n        if (meta.completedAt && meta.startedAt) {\n          const startTime = meta.startedAt.toDate ? meta.startedAt.toDate() : new Date(meta.startedAt);\n          const endTime = meta.completedAt.toDate ? meta.completedAt.toDate() : new Date(meta.completedAt);\n          totalTime += (endTime - startTime);\n          count++;\n        }\n      });\n    });\n    \n    return count > 0 ? totalTime / count : 0;\n  };\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const [jobsSnapshot, posSnapshot, vendorsSnapshot] = await Promise.all([\n        getDocs(collection(db, 'jobAssignments')),\n        getDocs(query(collection(db, 'purchaseOrders'), orderBy('createdAt', 'desc'))),\n        getDocs(collection(db, 'vendors'))\n      ]);\n      \n      const jobsData = [];\n      jobsSnapshot.forEach((doc) => {\n        jobsData.push({ id: doc.id, ...doc.data() });\n      });\n      \n      const posData = [];\n      posSnapshot.forEach((doc) => {\n        const data = doc.data();\n        posData.push({ \n          id: doc.id, \n          ...data,\n          // Ensure operationsStatus exists and has all operations\n          operationsStatus: {\n            ...Object.keys(MACHINE_OPERATIONS).reduce((acc, op) => ({ \n              ...acc, \n              [op]: data.operationsStatus?.[op] || 'pending' \n            }), {}),\n            ...(data.operationsStatus || {})\n          }\n        });\n      });\n      \n      const vendorsData = [];\n      vendorsSnapshot.forEach((doc) => {\n        vendorsData.push({ id: doc.id, ...doc.data() });\n      });\n      \n      setJobs(jobsData);\n      setPOs(posData);\n      setVendors(vendorsData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      showError('Failed to load data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePOOperationStatus = async (poId, operation, newStatus, notes = '') => {\n    try {\n      setUpdating(prev => ({ ...prev, [`${poId}_${operation}`]: true }));\n      const po = pos.find(p => p.id === poId);\n      const oldStatus = po?.operationsStatus?.[operation] || 'pending';\n\n      // Call centralized atomic service with authenticated user context\n      await updatePOOperationStatusService(poId, operation, newStatus, currentUser || {}, notes);\n\n      // Update local state then compute derived overall status inline\n      setPOs(prev => prev.map(p => {\n        if (p.id !== poId) return p;\n        const updatedOps = { ...(p.operationsStatus || {}), [operation]: newStatus };\n        \n        // Calculate completion percentage\n        const totalOperations = Object.keys(MACHINE_OPERATIONS).length;\n        const completedOperations = Object.values(updatedOps).filter(status => status === 'completed').length;\n        const progress = Math.round((completedOperations / totalOperations) * 100);\n        \n        // Determine overall status\n        let derivedStatus = p.status || 'pending';\n        if (completedOperations === totalOperations) derivedStatus = 'completed';\n        else if (completedOperations > 0 || Object.values(updatedOps).some(status => status === 'in_progress')) {\n          derivedStatus = 'in_progress';\n        }\n        \n        return { \n          ...p, \n          operationsStatus: updatedOps, \n          status: derivedStatus,\n          progress \n        };\n      }));\n\n      showSuccess(`Updated ${MACHINE_OPERATIONS[operation].name} from ${oldStatus} to ${newStatus}`);\n    } catch (error) {\n      console.error('Error updating operation status:', error);\n      showError('Failed to update operation status');\n    } finally {\n      setUpdating(prev => ({ ...prev, [`${poId}_${operation}`]: false }));\n    }\n  };\n\n  const openStatusUpdateModal = (poId, operation, currentStatus) => {\n    setStatusUpdateModal({\n      isOpen: true,\n      poId,\n      operation,\n      currentStatus\n    });\n  };\n\n  const closeStatusUpdateModal = () => {\n    setStatusUpdateModal({\n      isOpen: false,\n      poId: null,\n      operation: null,\n      currentStatus: null\n    });\n  };\n\n  const handleStatusUpdate = async (newStatus, notes) => {\n    const { poId, operation } = statusUpdateModal;\n    await updatePOOperationStatus(poId, operation, newStatus, notes);\n  };\n\n  const getVendorName = (vendorId) => {\n    const vendor = vendors.find(v => v.id === vendorId);\n    return vendor ? vendor.name : 'Unknown Vendor';\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return <FiCheckCircle className=\"text-green-500\" />;\n      case 'in_progress':\n        return <FiPlay className=\"text-blue-500\" />;\n      case 'pending':\n        return <FiClock className=\"text-yellow-500\" />;\n      case 'rejected':\n      case 'cancelled':\n        return <FiX className=\"text-red-500\" />;\n      default:\n        return <FiAlertCircle className=\"text-gray-500\" />;\n    }\n  };\n\n  const getOperationIcon = (operation) => {\n    const OperationIcon = MACHINE_OPERATIONS[operation]?.icon || FiTool;\n    return <OperationIcon className={`text-${MACHINE_OPERATIONS[operation]?.color}-500`} />;\n  };\n\n  const fetchOperationHistory = async (itemId, itemType) => {\n    try {\n      const historyQuery = query(\n        collection(db, 'operationHistory'),\n        where('itemId', '==', itemId),\n        where('itemType', '==', itemType),\n        orderBy('timestamp', 'desc')\n      );\n      const snapshot = await getDocs(historyQuery);\n      const history = [];\n      snapshot.forEach(doc => {\n        history.push({ id: doc.id, ...doc.data() });\n      });\n      setOperationHistory(history);\n    } catch (error) {\n      console.error('Error fetching operation history:', error);\n      setOperationHistory([]);\n    }\n  };\n\n  const openTracker = (item, type) => {\n    setSelectedItem({ ...item, type });\n    setShowTracker(true);\n    fetchOperationHistory(item.id, type);\n  };\n\n  const filteredPOs = useMemo(() => {\n    let filtered = pos.filter(po => {\n      const matchesStatus = filters.status === 'all' || po.status === filters.status;\n      const matchesVendor = filters.vendor === 'all' || po.vendorId === filters.vendor;\n      const matchesOperation = filters.operation === 'all' || \n        (po.operationsStatus && filters.operation in po.operationsStatus);\n      const matchesSearch = po.poNumber?.toLowerCase().includes(filters.search.toLowerCase()) ||\n                           getVendorName(po.vendorId).toLowerCase().includes(filters.search.toLowerCase());\n      \n      let matchesDate = true;\n      if (filters.dateRange !== 'all' && po.createdAt) {\n        const poDate = po.createdAt.toDate ? po.createdAt.toDate() : new Date(po.createdAt);\n        const now = new Date();\n        const daysDiff = Math.floor((now - poDate) / (1000 * 60 * 60 * 24));\n        \n        switch (filters.dateRange) {\n          case 'today': matchesDate = daysDiff === 0; break;\n          case 'week': matchesDate = daysDiff <= 7; break;\n          case 'month': matchesDate = daysDiff <= 30; break;\n          default: matchesDate = true;\n        }\n      }\n      \n      return matchesStatus && matchesVendor && matchesOperation && matchesSearch && matchesDate;\n    });\n    \n    return filtered.sort((a, b) => {\n      const aVal = a[sortConfig.key];\n      const bVal = b[sortConfig.key];\n      \n      if (sortConfig.key === 'progress') {\n        return sortConfig.direction === 'asc' ? aVal - bVal : bVal - aVal;\n      }\n      \n      if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;\n      if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [pos, filters, sortConfig]);\n\n  const uniqueVendors = useMemo(() => {\n    const vendorIds = [...new Set(pos.map(p => p.vendorId))];\n    return vendorIds.map(id => ({ id, name: getVendorName(id) })).filter(v => v.name !== 'Unknown Vendor');\n  }, [pos, vendors]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:justify-between lg:items-start space-y-4 lg:space-y-0\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center\">\n              <FiActivity className=\"text-white\" size={24} />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Machine Operations Manager</h1>\n              <p className=\"text-base text-gray-600 mt-1\">Track and manage all machine operations</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <FiBell className=\"text-indigo-500\" size={16} />\n              <span>Live Updates</span>\n              <div className={`w-2 h-2 rounded-full animate-pulse ${\n                autoRefresh ? 'bg-green-400' : 'bg-gray-400'\n              }`} />\n            </div>\n            \n            <button\n              onClick={() => setAutoRefresh(!autoRefresh)}\n              className={`p-2 rounded-lg transition-all duration-200 ${\n                autoRefresh \n                  ? 'bg-green-100 text-green-600 hover:bg-green-200' \n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n              title={autoRefresh ? 'Disable auto-refresh' : 'Enable auto-refresh'}\n            >\n              <FiRefreshCw className={autoRefresh ? 'animate-spin' : ''} size={16} />\n            </button>\n            \n            <button\n              onClick={fetchData}\n              className=\"inline-flex items-center px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl\"\n            >\n              <FiRefreshCw className=\"mr-2\" size={16} />\n              Refresh Data\n            </button>\n          </div>\n        </div>\n        \n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-6\">\n          <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-600 text-sm font-medium\">Total POs</p>\n                <p className=\"text-2xl font-bold text-blue-900\">{pos.length}</p>\n              </div>\n              <FiFileText className=\"text-blue-500\" size={24} />\n            </div>\n          </div>\n          \n          <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 p-4 rounded-lg border border-green-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-600 text-sm font-medium\">Completed Ops</p>\n                <p className=\"text-2xl font-bold text-green-900\">\n                  {completedOperations.length}\n                </p>\n              </div>\n              <FiCheckCircle className=\"text-green-500\" size={24} />\n            </div>\n          </div>\n          \n          <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 p-4 rounded-lg border border-yellow-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-yellow-600 text-sm font-medium\">In Progress</p>\n                <p className=\"text-2xl font-bold text-yellow-900\">\n                  {pos.filter(po => po.status === 'in_progress').length}\n                </p>\n              </div>\n              <FiPlay className=\"text-yellow-500\" size={24} />\n            </div>\n          </div>\n          \n          <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 p-4 rounded-lg border border-purple-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-600 text-sm font-medium\">Active Vendors</p>\n                <p className=\"text-2xl font-bold text-purple-900\">{uniqueVendors.length}</p>\n              </div>\n              <FiUser className=\"text-purple-500\" size={24} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-2\">\n        <nav className=\"flex space-x-2\">\n          {['operations', 'vendors', 'completed'].map(tab => (\n            <button\n              key={tab}\n              onClick={() => setActiveTab(tab)}\n              className={`flex-1 py-3 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${\n                activeTab === tab\n                  ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg'\n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n              }`}\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                {tab === 'operations' && <FiActivity size={16} />}\n                {tab === 'vendors' && <FiBarChart2 size={16} />}\n                {tab === 'completed' && <FiCheckCircle size={16} />}\n                <span className=\"capitalize\">{tab}</span>\n              </div>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Filters Sidebar */}\n        <aside className=\"lg:col-span-1 space-y-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 sticky top-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Filters</h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <FiSearch className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search POs or vendors...\"\n                  value={filters.search}\n                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                  className=\"w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n                <select\n                  value={filters.status}\n                  onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"in_progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Operation</label>\n                <select\n                  value={filters.operation}\n                  onChange={(e) => setFilters(prev => ({ ...prev, operation: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Operations</option>\n                  {Object.keys(MACHINE_OPERATIONS).map(op => (\n                    <option key={op} value={op}>{MACHINE_OPERATIONS[op].name}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Vendor</label>\n                <select\n                  value={filters.vendor}\n                  onChange={(e) => setFilters(prev => ({ ...prev, vendor: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Vendors</option>\n                  {uniqueVendors.map(vendor => (\n                    <option key={vendor.id} value={vendor.id}>{vendor.name}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Time Range</label>\n                <select\n                  value={filters.dateRange}\n                  onChange={(e) => setFilters(prev => ({ ...prev, dateRange: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Time</option>\n                  <option value=\"today\">Today</option>\n                  <option value=\"week\">This Week</option>\n                  <option value=\"month\">This Month</option>\n                </select>\n              </div>\n\n              <div className=\"flex items-center justify-between pt-2\">\n                <span className=\"text-xs text-gray-500\">{filteredPOs.length} POs</span>\n                <button\n                  className=\"text-xs text-indigo-600 hover:text-indigo-800\"\n                  onClick={() => setFilters({ status: 'all', operation: 'all', search: '', dateRange: 'all', vendor: 'all' })}\n                >\n                  Clear Filters\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Vendor Performance Summary */}\n          {activeTab !== 'vendors' && (\n            <div className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Vendor Performance</h3>\n              <div className=\"space-y-4\">\n                {Object.entries(vendorPerformance)\n                  .sort(([, a], [, b]) => b.efficiency - a.efficiency)\n                  .slice(0, 3)\n                  .map(([vendorId, data]) => (\n                    <div key={vendorId} className=\"flex items-center justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">{data.name}</p>\n                        <p className=\"text-xs text-gray-500\">{data.totalOperations} completed operations</p>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-16 bg-gray-200 rounded-full h-2 mr-2\">\n                          <div \n                            className=\"bg-green-600 h-2 rounded-full\" \n                            style={{ width: `${Math.min(data.efficiency, 100)}%` }}\n                          />\n                        </div>\n                        <span className=\"text-xs font-medium text-gray-700\">\n                          {Math.round(data.efficiency)}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                <button \n                  onClick={() => setActiveTab('vendors')}\n                  className=\"w-full text-center text-sm text-indigo-600 hover:text-indigo-800 mt-2\"\n                >\n                  View all vendors →\n                </button>\n              </div>\n            </div>\n          )}\n        </aside>\n\n        {/* Main Content */}\n        <section className=\"lg:col-span-3\">\n          {activeTab === 'operations' && (\n            <OperationsTable \n              pos={filteredPOs}\n              vendors={vendors}\n              updating={updating}\n              onUpdateOperationStatus={updatePOOperationStatus}\n              onOpenTracker={openTracker}\n              onOpenStatusUpdateModal={openStatusUpdateModal}\n              getVendorName={getVendorName}\n              getStatusColor={getStatusColor}\n              getStatusIcon={getStatusIcon}\n              getOperationIcon={getOperationIcon}\n            />\n          )}\n\n          {activeTab === 'vendors' && (\n            <VendorsPerformance \n              vendorPerformance={vendorPerformance}\n              getVendorName={getVendorName}\n            />\n          )}\n\n          {activeTab === 'completed' && (\n            <CompletedOperations \n              completedOperations={completedOperations}\n              vendors={vendors}\n              getVendorName={getVendorName}\n            />\n          )}\n        </section>\n      </div>\n\n      {/* Operation Tracker Modal */}\n      {showTracker && selectedItem && (\n        <OperationTracker\n          item={selectedItem}\n          history={operationHistory}\n          onClose={() => {\n            setShowTracker(false);\n            setSelectedItem(null);\n            fetchData();\n          }}\n          getStatusColor={getStatusColor}\n          getStatusIcon={getStatusIcon}\n          getVendorName={getVendorName}\n        />\n      )}\n\n      {/* Status Update Modal */}\n      <StatusUpdateModal\n        isOpen={statusUpdateModal.isOpen}\n        onClose={closeStatusUpdateModal}\n        operation={statusUpdateModal.operation}\n        currentStatus={statusUpdateModal.currentStatus}\n        onStatusUpdate={handleStatusUpdate}\n      />\n    </div>\n  );\n}\n\n// Operations Table Component\nfunction OperationsTable({ pos, vendors, updating, onUpdateOperationStatus, onOpenTracker, onOpenStatusUpdateModal, getVendorName, getStatusColor, getStatusIcon, getOperationIcon }) {\n  const [expandedRow, setExpandedRow] = useState(null);\n  \n  const toggleRowExpansion = (poId) => {\n    setExpandedRow(expandedRow === poId ? null : poId);\n  };\n\n  const handleStatusChange = (poId, operation, newStatus) => {\n    onUpdateOperationStatus(poId, operation, newStatus, `Status changed to ${newStatus}`);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                PO Details\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Vendor\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Progress\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {pos.map((po) => (\n              <>\n                <tr key={po.id} className=\"hover:bg-gray-50 cursor-pointer\" onClick={() => toggleRowExpansion(po.id)}>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">{po.poNumber}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {po.createdAt?.toDate?.()?.toLocaleDateString() || 'N/A'}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{getVendorName(po.vendorId)}</div>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2.5 mr-4\">\n                        <div \n                          className=\"bg-indigo-600 h-2.5 rounded-full\" \n                          style={{ width: `${po.progress || 0}%` }}\n                        />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        {po.progress || 0}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(po.status)}`}>\n                      {getStatusIcon(po.status)}\n                      <span className=\"ml-1 capitalize\">{po.status?.replace('_', ' ')}</span>\n                    </span>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium\">\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onOpenTracker(po, 'po');\n                        }}\n                        className=\"text-indigo-600 hover:text-indigo-900\"\n                      >\n                        View Details\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n                \n                {expandedRow === po.id && (\n                  <tr className=\"bg-gray-50\">\n                    <td colSpan={5} className=\"px-4 py-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                        {Object.entries(MACHINE_OPERATIONS).map(([opKey, opConfig]) => {\n                          const status = po.operationsStatus?.[opKey] || 'pending';\n                          const OperationIcon = opConfig.icon;\n                          const isUpdating = updating[`${po.id}_${opKey}`];\n                          \n                          return (\n                            <div key={opKey} className=\"bg-white rounded-lg p-4 shadow-sm border border-gray-200\">\n                              <div className=\"flex items-center justify-between mb-3\">\n                                <div className=\"flex items-center\">\n                                  <OperationIcon className={`text-${opConfig.color}-500 mr-2`} />\n                                  <div className=\"text-sm font-medium text-gray-900\">{opConfig.name}</div>\n                                </div>\n                                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(status)}`}>\n                                  {getStatusIcon(status)}\n                                  <span className=\"ml-1 capitalize\">{status.replace('_', ' ')}</span>\n                                </span>\n                              </div>\n                              \n                              <div className=\"flex flex-col space-y-2\">\n                                <button\n                                  onClick={() => onOpenStatusUpdateModal(po.id, opKey, status)}\n                                  className=\"w-full py-2 px-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors text-sm font-medium\"\n                                >\n                                  Update Status\n                                </button>\n                                \n                                <div className=\"flex space-x-1\">\n                                  <button\n                                    onClick={() => handleStatusChange(po.id, opKey, 'pending')}\n                                    disabled={isUpdating || status === 'pending'}\n                                    className={`flex-1 py-1 px-2 text-xs rounded ${\n                                      status === 'pending' \n                                        ? 'bg-yellow-100 text-yellow-800 border border-yellow-300' \n                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                    } ${isUpdating ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                  >\n                                    {isUpdating && status === 'pending' ? '...' : 'Pending'}\n                                  </button>\n                                  \n                                  <button\n                                    onClick={() => handleStatusChange(po.id, opKey, 'in_progress')}\n                                    disabled={isUpdating || status === 'in_progress'}\n                                    className={`flex-1 py-1 px-2 text-xs rounded ${\n                                      status === 'in_progress' \n                                        ? 'bg-blue-100 text-blue-800 border border-blue-300' \n                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                    } ${isUpdating ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                  >\n                                    {isUpdating && status === 'in_progress' ? '...' : 'Start'}\n                                  </button>\n                                  \n                                  <button\n                                    onClick={() => handleStatusChange(po.id, opKey, 'completed')}\n                                    disabled={isUpdating || status === 'completed'}\n                                    className={`flex-1 py-1 px-2 text-xs rounded ${\n                                      status === 'completed' \n                                        ? 'bg-green-100 text-green-800 border border-green-300' \n                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                    } ${isUpdating ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                  >\n                                    {isUpdating && status === 'completed' ? '...' : 'Complete'}\n                                  </button>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </>\n            ))}\n          </tbody>\n        </table>\n        \n        {pos.length === 0 && (\n          <div className=\"text-center py-12\">\n            <FiFileText className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No purchase orders found</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">No purchase orders match your current filters.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Vendor Performance Component\nfunction VendorsPerformance({ vendorPerformance, getVendorName }) {\n  const formatTime = (milliseconds) => {\n    if (!milliseconds) return 'N/A';\n    \n    const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Vendor Performance</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">Efficiency based on completed operations</p>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Vendor\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Total POs\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Completed Operations\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Efficiency\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Avg. Completion Time\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {Object.entries(vendorPerformance)\n              .sort(([, a], [, b]) => b.efficiency - a.efficiency)\n              .map(([vendorId, data]) => (\n                <tr key={vendorId} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">{data.name}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{data.totalPOs}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{data.totalOperations}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2.5 mr-4\">\n                        <div \n                          className=\"bg-green-600 h-2.5 rounded-full\" \n                          style={{ width: `${Math.min(data.efficiency, 100)}%` }}\n                        />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        {Math.round(data.efficiency)}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-500\">\n                      {formatTime(data.averageCompletionTime)}\n                    </div>\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n        \n        {Object.keys(vendorPerformance).length === 0 && (\n          <div className=\"text-center py-12\">\n            <FiUser className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No vendor data available</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Vendor performance data will appear here once operations are completed.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Completed Operations Component\nfunction CompletedOperations({ completedOperations, getVendorName }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Completed Operations</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">All machine operations that have been completed</p>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                PO Number\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Operation\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Vendor\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Completed On\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {completedOperations.map((op, index) => (\n              <tr key={index} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm font-medium text-gray-900\">{op.poNumber}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">\n                    {MACHINE_OPERATIONS[op.operation]?.name || op.operation}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">{op.vendor}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-500\">\n                    {op.completionDate?.toDate?.()?.toLocaleDateString() || 'N/A'}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        \n        {completedOperations.length === 0 && (\n          <div className=\"text-center py-12\">\n            <FiCheckCircle className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No completed operations</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Completed operations will appear here once they're finished.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":["MACHINE_OPERATIONS","HBL","name","icon","FiTool","color","VTL","FiCpu","Drilling","FiZap","VMC","FiTarget","updatePOOperationStatusService","async","poId","operation","newStatus","user","notes","arguments","length","undefined","_currentData$operatio","_currentData$operatio2","poRef","doc","db","poSnap","getDoc","exists","Error","currentData","data","currentStatus","operationsStatus","updatedOperationsStatus","totalOperations","Object","keys","completedOperations","values","filter","s","progress","Math","round","derivedStatus","status","some","batch","writeBatch","baseMeta","updatedAt","serverTimestamp","updatedBy","uid","email","displayName","extraMeta","startedAt","completedAt","update","operationsMeta","getDocs","query","collection","where","forEach","dcDoc","id","poStatus","poProgress","e","console","warn","message","mapPOToJobStatus","updates","j","push","poNumber","jobStatus","jobId","historyRef","set","itemId","itemType","oldStatus","userId","userName","timestamp","commit","error","OperationTracker","_ref","_item$status","item","history","onClose","getStatusColor","getStatusIcon","getVendorName","_jsx","className","children","_jsxs","onClick","FiX","size","vendorId","replace","map","record","index","_MACHINE_OPERATIONS$r","_record$timestamp","_record$timestamp$toD","toDate","call","toLocaleString","StatusUpdateModal","_ref2","_MACHINE_OPERATIONS$o","isOpen","onStatusUpdate","setNotes","useState","selectedStatus","setSelectedStatus","updating","setUpdating","useEffect","FiClock","FiPlay","FiCheckCircle","value","onChange","target","placeholder","rows","disabled","_Fragment","StatusManager","showSuccess","showError","useNotification","currentUser","useAuth","jobs","setJobs","pos","setPOs","vendors","setVendors","loading","setLoading","activeTab","setActiveTab","selectedItem","setSelectedItem","showTracker","setShowTracker","operationHistory","setOperationHistory","filters","setFilters","search","dateRange","vendor","viewMode","setViewMode","selectedItems","setSelectedItems","isMobile","setIsMobile","sortConfig","setSortConfig","key","direction","autoRefresh","setAutoRefresh","refreshIntervalRef","useRef","setCompletedOperations","vendorPerformance","setVendorPerformance","statusUpdateModal","setStatusUpdateModal","saved","localStorage","getItem","parsed","JSON","parse","prev","fetchData","checkMobile","window","innerWidth","addEventListener","removeEventListener","current","clearInterval","setInterval","setItem","stringify","performance","vendorPOs","po","completedOps","entries","_ref3","completionDate","createdAt","totalPOs","efficiency","averageCompletionTime","calculateAverageCompletionTime","flatMap","v","sort","a","b","Date","totalTime","count","_ref4","meta","startTime","endTime","jobsSnapshot","posSnapshot","vendorsSnapshot","Promise","all","orderBy","jobsData","posData","reduce","acc","op","_data$operationsStatu","vendorsData","updatePOOperationStatus","_po$operationsStatus","find","p","updatedOps","FiAlertCircle","filteredPOs","useMemo","_po$poNumber","matchesStatus","matchesVendor","matchesOperation","matchesSearch","toLowerCase","includes","matchesDate","poDate","now","daysDiff","floor","aVal","bVal","uniqueVendors","Set","FiActivity","FiBell","title","FiRefreshCw","FiFileText","FiUser","tab","FiBarChart2","FiSearch","type","_ref5","_ref6","slice","_ref7","style","width","min","OperationsTable","onUpdateOperationStatus","onOpenTracker","openTracker","historyQuery","snapshot","fetchOperationHistory","onOpenStatusUpdateModal","openStatusUpdateModal","getOperationIcon","_MACHINE_OPERATIONS$o2","_MACHINE_OPERATIONS$o3","OperationIcon","VendorsPerformance","CompletedOperations","closeStatusUpdateModal","_ref8","expandedRow","setExpandedRow","handleStatusChange","scope","_po$createdAt","_po$createdAt$toDate","_po$createdAt$toDate$","_po$status","toggleRowExpansion","toLocaleDateString","stopPropagation","colSpan","_ref9","_po$operationsStatus2","opKey","opConfig","isUpdating","_ref0","formatTime","milliseconds","hours","minutes","_ref1","_ref10","_ref11","_ref12","_MACHINE_OPERATIONS$o4","_op$completionDate","_op$completionDate$to","_op$completionDate$to2"],"sourceRoot":""}