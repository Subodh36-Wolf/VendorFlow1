{"version":3,"file":"static/js/196.6977ba41.chunk.js","mappings":"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","sources":["components/Admin/StatusManager.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { collection, getDocs, getDoc, doc, updateDoc, addDoc, query, where, orderBy, serverTimestamp, writeBatch } from 'firebase/firestore';\nimport { db } from '../../firebase';\nimport { useNotification } from './NotificationSystem';\nimport { useAuth } from '../../context/AuthContext';\nimport {\n  FiCheckCircle, FiClock, FiAlertCircle, FiXCircle, FiEdit2,\n  FiUser, FiFileText, FiCalendar, FiFilter, FiSearch, FiRefreshCw,\n  FiActivity, FiEye, FiTrendingUp, FiArrowRight, FiPlay, FiPause,\n  FiCheck, FiX, FiCpu, FiZap, FiTarget, FiBell,\n  FiGrid, FiList, FiMoreVertical, FiChevronDown, FiChevronUp,\n  FiDownload, FiUpload, FiSettings, FiSliders, FiMaximize2,\n  FiMinimize2, FiMenu, FiPhone, FiTablet, FiMonitor,\n  FiTool, FiPackage, FiTruck, FiBarChart2, FiPlus, FiMinus\n} from 'react-icons/fi';\n\n// Machine operations with detailed configuration\nconst MACHINE_OPERATIONS = {\n  HBL: { name: 'Horizontal Boring', icon: FiTool, color: 'blue' },\n  VTL: { name: 'Vertical Turning', icon: FiCpu, color: 'purple' },\n  Drilling: { name: 'Drilling', icon: FiZap, color: 'green' },\n  VMC: { name: 'Vertical Machining', icon: FiTarget, color: 'indigo' }\n};\n\n// Operation Status Service (atomic & auditable)\n// Operation Status Service (atomic & auditable) - UPDATED\nconst updatePOOperationStatusService = async (poId, operation, itemIndex, newStatus, user, notes = '') => {\n  try {\n    const poRef = doc(db, 'purchaseOrders', poId);\n    const poSnap = await getDoc(poRef);\n    if (!poSnap.exists()) throw new Error('Purchase order not found');\n\n    const currentData = poSnap.data() || {};\n\n    // Initialize operationsStatus structure if it doesn't exist\n    const currentOperationsStatus = currentData.operationsStatus || {};\n    const currentItemStatus = currentOperationsStatus[itemIndex] || {};\n    const oldStatus = currentItemStatus[operation] || 'pending';\n\n    // Build updated maps - now tracking by item index and operation\n    const updatedItemStatus = {\n      ...currentItemStatus,\n      [operation]: newStatus,\n    };\n\n    const updatedOperationsStatus = {\n      ...currentOperationsStatus,\n      [itemIndex]: updatedItemStatus,\n    };\n\n    // Calculate progress based on actual items and their operations\n    const items = currentData.items || [];\n    let totalOperations = 0;\n    let completedOperations = 0;\n\n    items.forEach((item, index) => {\n      const itemOperations = updatedOperationsStatus[index] || {};\n      Object.keys(itemOperations).forEach(op => {\n        totalOperations++;\n        if (itemOperations[op] === 'completed') {\n          completedOperations++;\n        }\n      });\n    });\n\n    const progress = totalOperations > 0 ? Math.round((completedOperations / totalOperations) * 100) : 0;\n\n    // Determine overall status\n    let derivedStatus = currentData.status || 'pending';\n    if (totalOperations > 0 && completedOperations === totalOperations) {\n      derivedStatus = 'completed';\n    } else if (completedOperations > 0 || Object.values(updatedOperationsStatus).some(itemStatus =>\n      Object.values(itemStatus).some(status => status === 'in_progress'))) {\n      derivedStatus = 'in_progress';\n    }\n\n    const batch = writeBatch(db);\n\n    // Build per-operation meta (now includes itemIndex)\n    const baseMeta = {\n      status: newStatus,\n      notes: notes || '',\n      updatedAt: serverTimestamp(),\n      updatedBy: {\n        uid: user?.uid || null,\n        email: user?.email || null,\n        name: user?.displayName || null,\n      },\n      itemIndex: itemIndex,\n      itemDescription: items[itemIndex]?.description || `Item ${itemIndex + 1}`\n    };\n\n    const extraMeta = {};\n    if (newStatus === 'in_progress') extraMeta.startedAt = serverTimestamp();\n    if (newStatus === 'completed') extraMeta.completedAt = serverTimestamp();\n\n    // Create a unique key for this operation+item combination\n    const operationKey = `${itemIndex}_${operation}`;\n\n    batch.update(poRef, {\n      operationsStatus: updatedOperationsStatus,\n      [`operationsMeta.${operationKey}`]: {\n        ...(currentData.operationsMeta?.[operationKey] || {}),\n        ...baseMeta,\n        ...extraMeta\n      },\n      status: derivedStatus,\n      progress,\n      updatedAt: serverTimestamp(),\n    });\n\n    // Auto-create Industrial Task based on status update (updated for item-specific tracking)\n    try {\n      const vendorId = currentData.vendorId || null;\n      const vendorName = currentData.vendorName || currentData.vendor || '';\n      const poNumber = currentData.poNumber || poId;\n      const itemDescription = items[itemIndex]?.description || `Item ${itemIndex + 1}`;\n\n      // Build a meaningful title/description\n      let title = '';\n      let priority = 'medium';\n      let taskStatus = 'pending';\n\n      if (newStatus === 'in_progress') {\n        title = `Start ${MACHINE_OPERATIONS[operation]?.name || operation} for ${itemDescription} (PO ${poNumber})`;\n        priority = 'high';\n        taskStatus = 'in-progress';\n      } else if (newStatus === 'completed') {\n        title = `Verify completion: ${MACHINE_OPERATIONS[operation]?.name || operation} for ${itemDescription} (PO ${poNumber})`;\n        priority = 'medium';\n        taskStatus = 'completed';\n      } else if (newStatus === 'pending') {\n        title = `Plan ${MACHINE_OPERATIONS[operation]?.name || operation} for ${itemDescription} (PO ${poNumber})`;\n        priority = 'low';\n        taskStatus = 'pending';\n      }\n\n      if (title) {\n        const dateKey = new Date().toISOString().slice(0, 10);\n        const deterministicId = `${poId}_${operationKey}_${newStatus}_${dateKey}`;\n        const taskRef = doc(db, 'industrialTasks', deterministicId);\n        batch.set(taskRef, {\n          title,\n          description: notes || `Vendor: ${vendorName || 'N/A'} | Item: ${itemDescription} | Operation: ${MACHINE_OPERATIONS[operation]?.name || operation}`,\n          priority,\n          assignedTo: vendorName || '',\n          dueDate: serverTimestamp(),\n          category: 'production',\n          completed: taskStatus === 'completed',\n          status: taskStatus,\n          progress: taskStatus === 'completed' ? 100 : 0,\n          department: 'manufacturing',\n          equipment: '',\n          estimatedTime: 0,\n          safetyNotes: '',\n          sequence: [{ step: `${MACHINE_OPERATIONS[operation]?.name || operation}`, completed: taskStatus === 'completed' }],\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          // linkage fields for context\n          vendorId,\n          vendorName: vendorName || null,\n          poId,\n          poNumber,\n          operation,\n          itemIndex,\n          itemDescription,\n          newStatus,\n          source: 'statusManager',\n          autoGenerated: true,\n        });\n      }\n\n      // Auto-create Vendor Todo for material collection when operation is completed\n      if (newStatus === 'completed') {\n        const dateKey = new Date().toISOString().slice(0, 10);\n        const todoId = `todo_${poId}_${operationKey}_collect_${dateKey}`;\n        const todoRef = doc(db, 'vendorTodos', todoId);\n\n        // Map operation to VendorTodoList operationType values\n        const opLower = (operation || '').toString().toLowerCase();\n        const allowedOps = ['hbl', 'vtl', 'drilling', 'vmc', 'grinding', 'assembly', 'painting', 'packing', 'other'];\n        const operationType = allowedOps.includes(opLower) ? opLower : 'other';\n\n        const bodiesCount = (items[itemIndex]?.quantity && Number(items[itemIndex]?.quantity)) || 1;\n\n        batch.set(todoRef, {\n          date: dateKey, // used by VendorTodoList query equality\n          vendors: vendorId ? [{ vendorId, bodiesCount }] : [],\n          totalBodies: bodiesCount,\n          operationType,\n          targetLocation: 'VMT Store',\n          notes: notes || `Collect material for ${MACHINE_OPERATIONS[operation]?.name || operation} - ${itemDescription} (PO ${poNumber})`,\n          status: 'pending',\n          priority: 'high',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n          // linkage/context fields\n          vendorId: vendorId || null,\n          vendorName: vendorName || null,\n          poId,\n          poNumber,\n          operation,\n          itemIndex,\n          itemDescription,\n          source: 'statusManager',\n          autoGenerated: true,\n        }, { merge: true });\n      }\n    } catch (e) {\n      console.warn('Todo auto-create skipped/failed:', e?.message || e);\n    }\n\n    // Propagate to related entities (same as before)\n    // 1) Delivery Challans linked by poId\n    try {\n      const dcsSnap = await getDocs(\n        query(collection(db, 'deliveryChallans'), where('poId', '==', poId))\n      );\n      dcsSnap.forEach((dcDoc) => {\n        batch.update(doc(db, 'deliveryChallans', dcDoc.id), {\n          poStatus: derivedStatus,\n          poProgress: progress,\n          updatedAt: serverTimestamp(),\n        });\n      });\n    } catch (e) {\n      console.warn('DC propagation skipped/failed:', e?.message || e);\n    }\n\n    // 2) Job Assignments linked by poId or reference == poNumber\n    const mapPOToJobStatus = (poStatus) => {\n      switch (poStatus) {\n        case 'completed':\n          return 'completed';\n        case 'in_progress':\n          return 'in-progress';\n        case 'pending':\n        default:\n          return 'assigned';\n      }\n    };\n\n    try {\n      const updates = [];\n      // By poId\n      const jobsByPoId = await getDocs(\n        query(collection(db, 'jobAssignments'), where('poId', '==', poId))\n      );\n      jobsByPoId.forEach((j) => updates.push(j.id));\n\n      // Fallback by reference == poNumber (if present)\n      const poNumber = currentData.poNumber;\n      if (updates.length === 0 && poNumber) {\n        const jobsByRef = await getDocs(\n          query(collection(db, 'jobAssignments'), where('reference', '==', poNumber))\n        );\n        jobsByRef.forEach((j) => updates.push(j.id));\n      }\n\n      const jobStatus = mapPOToJobStatus(derivedStatus);\n      updates.forEach((jobId) => {\n        batch.update(doc(db, 'jobAssignments', jobId), {\n          status: jobStatus,\n          updatedAt: serverTimestamp(),\n        });\n      });\n    } catch (e) {\n      console.warn('Job propagation skipped/failed:', e?.message || e);\n    }\n\n    // History record (updated to include itemIndex)\n    const historyRef = doc(collection(db, 'operationHistory'));\n    batch.set(historyRef, {\n      itemId: poId,\n      itemType: 'po_operation',\n      operation,\n      itemIndex,\n      itemDescription: items[itemIndex]?.description || `Item ${itemIndex + 1}`,\n      oldStatus,\n      newStatus,\n      notes: notes || '',\n      userId: user?.uid || null,\n      userName: user?.displayName || user?.email || 'Unknown',\n      timestamp: serverTimestamp(),\n    });\n\n    await batch.commit();\n    return true;\n  } catch (error) {\n    console.error('Error in operation status service:', error);\n    throw error;\n  }\n};\n\n// Operation Tracker Component\nconst OperationTracker = ({ item, history, onClose, getStatusColor, getStatusIcon, getVendorName }) => {\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6 border-b border-gray-200 flex justify-between items-center\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Operation History - {item.poNumber}</h2>\n          <button onClick={onClose} className=\"text-gray-400 hover:text-gray-600\">\n            <FiX size={24} />\n          </button>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"mb-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-500\">Vendor</h3>\n              <p className=\"text-lg font-medium\">{getVendorName(item.vendorId)}</p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-500\">Current Status</h3>\n              <p className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(item.status)}`}>\n                {getStatusIcon(item.status)}\n                <span className=\"ml-1 capitalize\">{item.status?.replace('_', ' ')}</span>\n              </p>\n            </div>\n          </div>\n\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Operation Timeline</h3>\n\n          {history.length > 0 ? (\n            <div className=\"space-y-4\">\n              {history.map((record, index) => (\n                <div key={record.id || index} className=\"flex\">\n                  <div className=\"flex flex-col items-center mr-4\">\n                    <div className={`w-3 h-3 rounded-full ${record.newStatus === 'completed' ? 'bg-green-500' :\n                        record.newStatus === 'in_progress' ? 'bg-blue-500' :\n                          record.newStatus === 'pending' ? 'bg-yellow-500' : 'bg-gray-500'\n                      }`}></div>\n                    {index < history.length - 1 && (\n                      <div className=\"w-0.5 h-16 bg-gray-300 my-1\"></div>\n                    )}\n                  </div>\n                  <div className=\"flex-1 pb-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium text-gray-900\">\n                        {MACHINE_OPERATIONS[record.operation]?.name || record.operation}\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        {record.timestamp?.toDate?.().toLocaleString() || 'N/A'}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      Changed from <span className=\"font-medium\">{record.oldStatus}</span> to <span className=\"font-medium\">{record.newStatus}</span>\n                      {record.notes && ` - ${record.notes}`}\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">By: {record.userName}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No history available for this operation\n            </div>\n          )}\n        </div>\n\n        <div className=\"p-6 border-t border-gray-200 flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Status Update Modal Component\n// Status Update Modal Component - UPDATED\nconst StatusUpdateModal = ({ isOpen, onClose, operation, itemIndex, currentStatus, onStatusUpdate, poData }) => {\n  const [notes, setNotes] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState(currentStatus);\n  const [updating, setUpdating] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedStatus(currentStatus);\n      setNotes('');\n    }\n  }, [isOpen, currentStatus]);\n\n  const handleSubmit = async () => {\n    if (selectedStatus === currentStatus) {\n      onClose();\n      return;\n    }\n\n    setUpdating(true);\n    try {\n      await onStatusUpdate(selectedStatus, notes);\n      onClose();\n    } catch (error) {\n      console.error('Error updating status:', error);\n    } finally {\n      setUpdating(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  const itemDescription = poData?.items?.[itemIndex]?.description || `Item ${itemIndex + 1}`;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-xl shadow-xl max-w-md w-full\">\n        <div className=\"p-6 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Update Operation Status</h2>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {MACHINE_OPERATIONS[operation]?.name || operation} - {itemDescription}\n          </p>\n        </div>\n        <div className=\"p-6 space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Status</label>\n            <div className=\"grid grid-cols-3 gap-2\">\n              <button\n                onClick={() => setSelectedStatus('pending')}\n                className={`p-3 rounded-lg border text-center ${selectedStatus === 'pending'\n                    ? 'bg-yellow-100 border-yellow-500 text-yellow-700'\n                    : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                  }`}\n              >\n                <FiClock className=\"mx-auto mb-1\" />\n                <span className=\"text-xs\">Pending</span>\n              </button>\n              <button\n                onClick={() => setSelectedStatus('in_progress')}\n                className={`p-3 rounded-lg border text-center ${selectedStatus === 'in_progress'\n                    ? 'bg-blue-100 border-blue-500 text-blue-700'\n                    : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                  }`}\n              >\n                <FiPlay className=\"mx-auto mb-1\" />\n                <span className=\"text-xs\">In Progress</span>\n              </button>\n              <button\n                onClick={() => setSelectedStatus('completed')}\n                className={`p-3 rounded-lg border text-center ${selectedStatus === 'completed'\n                    ? 'bg-green-100 border-green-500 text-green-700'\n                    : 'bg-gray-100 border-gray-300 text-gray-700 hover:bg-gray-200'\n                  }`}\n              >\n                <FiCheckCircle className=\"mx-auto mb-1\" />\n                <span className=\"text-xs\">Completed</span>\n              </button>\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Notes (Optional)</label>\n            <textarea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Add any notes about this status change...\"\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n              rows={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"p-6 border-t border-gray-200 flex justify-end space-x-3\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n            disabled={updating}\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleSubmit}\n            disabled={updating || selectedStatus === currentStatus}\n            className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center\"\n          >\n            {updating ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Updating...\n              </>\n            ) : (\n              'Update Status'\n            )}\n          </button>\n        </div>\n        {/* ... rest of the modal remains the same ... */}\n      </div>\n    </div>\n  );\n};\n\n\n\n\nexport default function StatusManager() {\n  const { showSuccess, showError } = useNotification();\n  const { currentUser } = useAuth();\n  const [jobs, setJobs] = useState([]);\n  const [pos, setPOs] = useState([]);\n  const [vendors, setVendors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [updating, setUpdating] = useState({});\n  const [activeTab, setActiveTab] = useState('operations');\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [showTracker, setShowTracker] = useState(false);\n  const [operationHistory, setOperationHistory] = useState([]);\n  const [filters, setFilters] = useState({\n    status: 'all',\n    operation: 'all',\n    search: '',\n    dateRange: 'all',\n    vendor: 'all'\n  });\n  const [viewMode, setViewMode] = useState('table');\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [isMobile, setIsMobile] = useState(false);\n  const [sortConfig, setSortConfig] = useState({ key: 'createdAt', direction: 'desc' });\n  const [autoRefresh, setAutoRefresh] = useState(false);\n  const refreshIntervalRef = useRef(null);\n  const [completedOperations, setCompletedOperations] = useState([]);\n  const [vendorPerformance, setVendorPerformance] = useState({});\n  const [statusUpdateModal, setStatusUpdateModal] = useState({\n    isOpen: false,\n    poId: null,\n    operation: null,\n    itemIndex: null,\n    currentStatus: null\n  });\n\n  useEffect(() => {\n    try {\n      const saved = localStorage.getItem('statusManagerFilters');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        setFilters(prev => ({ ...prev, ...parsed }));\n      }\n    } catch { }\n\n    fetchData();\n\n    // Check if mobile\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n\n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n\n    return () => {\n      window.removeEventListener('resize', checkMobile);\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (autoRefresh) {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n      refreshIntervalRef.current = setInterval(fetchData, 30000);\n    } else {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n        refreshIntervalRef.current = null;\n      }\n    }\n    return () => {\n      if (refreshIntervalRef.current) {\n        clearInterval(refreshIntervalRef.current);\n      }\n    };\n  }, [autoRefresh]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('statusManagerFilters', JSON.stringify(filters));\n    } catch { }\n  }, [filters]);\n\n  // Calculate vendor performance metrics\n  // Update the vendor performance calculation in the main useEffect\n  useEffect(() => {\n    if (pos.length > 0 && vendors.length > 0) {\n      const performance = {};\n\n      vendors.forEach(vendor => {\n        const vendorPOs = pos.filter(po => po.vendorId === vendor.id);\n        const completedOps = [];\n\n        vendorPOs.forEach(po => {\n          // Updated to track operations per item\n          Object.entries(po.operationsStatus || {}).forEach(([itemIndex, itemOperations]) => {\n            Object.entries(itemOperations).forEach(([operation, status]) => {\n              if (status === 'completed') {\n                const itemDescription = po.items?.[parseInt(itemIndex)]?.description || `Item ${parseInt(itemIndex) + 1}`;\n                completedOps.push({\n                  poNumber: po.poNumber,\n                  operation,\n                  itemIndex: parseInt(itemIndex),\n                  itemDescription,\n                  completionDate: po.updatedAt || po.createdAt,\n                  vendor: vendor.name\n                });\n              }\n            });\n          });\n        });\n\n        // Calculate total operations based on actual items and their operations\n        let totalOperations = 0;\n        vendorPOs.forEach(po => {\n          po.items?.forEach((item, index) => {\n            const itemOperations = getItemOperations(item);\n            totalOperations += itemOperations.length;\n          });\n        });\n\n        performance[vendor.id] = {\n          name: vendor.name,\n          totalPOs: vendorPOs.length,\n          totalOperations: totalOperations,\n          completedOperations: completedOps,\n          efficiency: totalOperations > 0\n            ? (completedOps.length / totalOperations) * 100\n            : 0,\n          averageCompletionTime: calculateAverageCompletionTime(vendorPOs)\n        };\n      });\n\n      setVendorPerformance(performance);\n      setCompletedOperations(\n        Object.values(performance)\n          .flatMap(v => v.completedOperations)\n          .sort((a, b) => new Date(b.completionDate) - new Date(a.completionDate))\n      );\n    }\n  }, [pos, vendors]);\n\n  // Helper function to get operations for an item\n  const getItemOperations = (item) => {\n    const operations = [];\n    if (item.operation && item.operation !== '') {\n      operations.push(item.operation);\n    }\n    return operations;\n  };\n\n  \n\n  const calculateAverageCompletionTime = (vendorPOs) => {\n    let totalTime = 0;\n    let count = 0;\n\n    vendorPOs.forEach(po => {\n      Object.entries(po.operationsMeta || {}).forEach(([operation, meta]) => {\n        if (meta.completedAt && meta.startedAt) {\n          const startTime = meta.startedAt.toDate ? meta.startedAt.toDate() : new Date(meta.startedAt);\n          const endTime = meta.completedAt.toDate ? meta.completedAt.toDate() : new Date(meta.completedAt);\n          totalTime += (endTime - startTime);\n          count++;\n        }\n      });\n    });\n\n    return count > 0 ? totalTime / count : 0;\n  };\n\n  const fetchData = async () => {\n    try {\n      setLoading(true);\n      const [jobsSnapshot, posSnapshot, vendorsSnapshot] = await Promise.all([\n        getDocs(collection(db, 'jobAssignments')),\n        getDocs(query(collection(db, 'purchaseOrders'), orderBy('createdAt', 'desc'))),\n        getDocs(collection(db, 'vendors'))\n      ]);\n\n      const jobsData = [];\n      jobsSnapshot.forEach((doc) => {\n        jobsData.push({ id: doc.id, ...doc.data() });\n      });\n\n      const posData = [];\n      posSnapshot.forEach((doc) => {\n        const data = doc.data();\n        posData.push({\n          id: doc.id,\n          ...data,\n          // Use only operations that are actually present on this PO\n          operationsStatus: {\n            ...(data.operationsStatus || {})\n          }\n        });\n      });\n\n      const vendorsData = [];\n      vendorsSnapshot.forEach((doc) => {\n        vendorsData.push({ id: doc.id, ...doc.data() });\n      });\n\n      setJobs(jobsData);\n      setPOs(posData);\n      setVendors(vendorsData);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      showError('Failed to load data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update the updatePOOperationStatus function in the main component\n  const updatePOOperationStatus = async (poId, operation, itemIndex, newStatus, notes = '') => {\n    try {\n      setUpdating(prev => ({ ...prev, [`${poId}_${itemIndex}_${operation}`]: true }));\n      const po = pos.find(p => p.id === poId);\n      const oldStatus = po?.operationsStatus?.[itemIndex]?.[operation] || 'pending';\n\n      // Call centralized atomic service with authenticated user context\n      await updatePOOperationStatusService(poId, operation, itemIndex, newStatus, currentUser || {}, notes);\n\n      // Update local state then compute derived overall status inline\n      setPOs(prev => prev.map(p => {\n        if (p.id !== poId) return p;\n\n        const currentItemStatus = p.operationsStatus?.[itemIndex] || {};\n        const updatedItemStatus = {\n          ...currentItemStatus,\n          [operation]: newStatus,\n        };\n\n        const updatedOperationsStatus = {\n          ...(p.operationsStatus || {}),\n          [itemIndex]: updatedItemStatus,\n        };\n\n        // Calculate completion percentage using actual items and their operations\n        const items = p.items || [];\n        let totalOperations = 0;\n        let completedOperations = 0;\n\n        items.forEach((item, idx) => {\n          const itemOps = updatedOperationsStatus[idx] || {};\n          Object.keys(itemOps).forEach(op => {\n            totalOperations++;\n            if (itemOps[op] === 'completed') {\n              completedOperations++;\n            }\n          });\n        });\n\n        const progress = totalOperations > 0 ? Math.round((completedOperations / totalOperations) * 100) : 0;\n\n        // Determine overall status\n        let derivedStatus = p.status || 'pending';\n        if (totalOperations > 0 && completedOperations === totalOperations) derivedStatus = 'completed';\n        else if (completedOperations > 0 || Object.values(updatedOperationsStatus).some(itemStatus =>\n          Object.values(itemStatus).some(status => status === 'in_progress'))) {\n          derivedStatus = 'in_progress';\n        }\n\n        return {\n          ...p,\n          operationsStatus: updatedOperationsStatus,\n          status: derivedStatus,\n          progress\n        };\n      }));\n\n      showSuccess(`Updated ${MACHINE_OPERATIONS[operation].name} for item ${itemIndex + 1} from ${oldStatus} to ${newStatus}`);\n    } catch (error) {\n      console.error('Error updating operation status:', error);\n      showError('Failed to update operation status');\n    } finally {\n      setUpdating(prev => ({ ...prev, [`${poId}_${itemIndex}_${operation}`]: false }));\n    }\n  };\n\n  // Update the openStatusUpdateModal function\n  const openStatusUpdateModal = (poId, operation, itemIndex, currentStatus) => {\n    setStatusUpdateModal({\n      isOpen: true,\n      poId,\n      operation,\n      itemIndex,\n      currentStatus\n    });\n  };\n\n  // Update the handleStatusUpdate function\n  const handleStatusUpdate = async (newStatus, notes) => {\n    const { poId, operation, itemIndex } = statusUpdateModal;\n    await updatePOOperationStatus(poId, operation, itemIndex, newStatus, notes);\n  };\n\n  const closeStatusUpdateModal = () => {\n    setStatusUpdateModal({\n      isOpen: false,\n      poId: null,\n      operation: null,\n      itemIndex: null,\n      currentStatus: null\n    });\n  };\n\n\n  const getVendorName = (vendorId) => {\n    const vendor = vendors.find(v => v.id === vendorId);\n    return vendor ? vendor.name : 'Unknown Vendor';\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'rejected':\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return <FiCheckCircle className=\"text-green-500\" />;\n      case 'in_progress':\n        return <FiPlay className=\"text-blue-500\" />;\n      case 'pending':\n        return <FiClock className=\"text-yellow-500\" />;\n      case 'rejected':\n      case 'cancelled':\n        return <FiX className=\"text-red-500\" />;\n      default:\n        return <FiAlertCircle className=\"text-gray-500\" />;\n    }\n  };\n\n  const getOperationIcon = (operation) => {\n    const OperationIcon = MACHINE_OPERATIONS[operation]?.icon || FiTool;\n    const color = MACHINE_OPERATIONS[operation]?.color;\n    const colorClass =\n      color === 'blue' ? 'text-blue-500' :\n        color === 'purple' ? 'text-purple-500' :\n          color === 'green' ? 'text-green-500' :\n            color === 'indigo' ? 'text-indigo-500' :\n              'text-gray-500';\n    return <OperationIcon className={colorClass} />;\n  };\n\n  const fetchOperationHistory = async (itemId, itemType) => {\n    try {\n      const historyQuery = query(\n        collection(db, 'operationHistory'),\n        where('itemId', '==', itemId),\n        where('itemType', '==', itemType)\n      );\n      const snapshot = await getDocs(historyQuery);\n      const history = [];\n      snapshot.forEach(doc => {\n        history.push({ id: doc.id, ...doc.data() });\n      });\n      // Sort client-side by timestamp desc to avoid requiring a composite index\n      history.sort((a, b) => {\n        const at = a.timestamp?.toDate?.()?.getTime?.() ?? new Date(a.timestamp || 0).getTime();\n        const bt = b.timestamp?.toDate?.()?.getTime?.() ?? new Date(b.timestamp || 0).getTime();\n        return bt - at;\n      });\n      setOperationHistory(history);\n    } catch (error) {\n      console.error('Error fetching operation history:', error);\n      setOperationHistory([]);\n    }\n  };\n\n  const openTracker = (item, type) => {\n    setSelectedItem({ ...item, type });\n    setShowTracker(true);\n    fetchOperationHistory(item.id, type);\n  };\n\n  const filteredPOs = useMemo(() => {\n    let filtered = pos.filter(po => {\n      const matchesStatus = filters.status === 'all' || po.status === filters.status;\n      const matchesVendor = filters.vendor === 'all' || po.vendorId === filters.vendor;\n      const matchesOperation = filters.operation === 'all' ||\n        (po.operationsStatus && filters.operation in po.operationsStatus);\n      const matchesSearch = po.poNumber?.toLowerCase().includes(filters.search.toLowerCase()) ||\n        getVendorName(po.vendorId).toLowerCase().includes(filters.search.toLowerCase());\n\n      let matchesDate = true;\n      if (filters.dateRange !== 'all' && po.createdAt) {\n        const poDate = po.createdAt.toDate ? po.createdAt.toDate() : new Date(po.createdAt);\n        const now = new Date();\n        const daysDiff = Math.floor((now - poDate) / (1000 * 60 * 60 * 24));\n\n        switch (filters.dateRange) {\n          case 'today': matchesDate = daysDiff === 0; break;\n          case 'week': matchesDate = daysDiff <= 7; break;\n          case 'month': matchesDate = daysDiff <= 30; break;\n          default: matchesDate = true;\n        }\n      }\n\n      return matchesStatus && matchesVendor && matchesOperation && matchesSearch && matchesDate;\n    });\n\n    return filtered.sort((a, b) => {\n      const aVal = a[sortConfig.key];\n      const bVal = b[sortConfig.key];\n\n      if (sortConfig.key === 'progress') {\n        return sortConfig.direction === 'asc' ? aVal - bVal : bVal - aVal;\n      }\n\n      if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;\n      if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;\n      return 0;\n    });\n  }, [pos, filters, sortConfig]);\n\n  const uniqueVendors = useMemo(() => {\n    const vendorIds = [...new Set(pos.map(p => p.vendorId))];\n    return vendorIds.map(id => ({ id, name: getVendorName(id) })).filter(v => v.name !== 'Unknown Vendor');\n  }, [pos, vendors]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:justify-between lg:items-start space-y-4 lg:space-y-0\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center\">\n              <FiActivity className=\"text-white\" size={24} />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Machine Operations Manager</h1>\n              <p className=\"text-base text-gray-600 mt-1\">Track and manage all machine operations</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <FiBell className=\"text-indigo-500\" size={16} />\n              <span>Live Updates</span>\n              <div className={`w-2 h-2 rounded-full animate-pulse ${autoRefresh ? 'bg-green-400' : 'bg-gray-400'\n                }`} />\n            </div>\n\n            <button\n              onClick={() => setAutoRefresh(!autoRefresh)}\n              className={`p-2 rounded-lg transition-all duration-200 ${autoRefresh\n                  ? 'bg-green-100 text-green-600 hover:bg-green-200'\n                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              title={autoRefresh ? 'Disable auto-refresh' : 'Enable auto-refresh'}\n            >\n              <FiRefreshCw className={autoRefresh ? 'animate-spin' : ''} size={16} />\n            </button>\n\n            <button\n              onClick={fetchData}\n              className=\"inline-flex items-center px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl\"\n            >\n              <FiRefreshCw className=\"mr-2\" size={16} />\n              Refresh Data\n            </button>\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-6\">\n          <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-600 text-sm font-medium\">Total POs</p>\n                <p className=\"text-2xl font-bold text-blue-900\">{pos.length}</p>\n              </div>\n              <FiFileText className=\"text-blue-500\" size={24} />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-green-50 to-emerald-50 p-4 rounded-lg border border-green-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-600 text-sm font-medium\">Completed Ops</p>\n                <p className=\"text-2xl font-bold text-green-900\">\n                  {completedOperations.length}\n                </p>\n              </div>\n              <FiCheckCircle className=\"text-green-500\" size={24} />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 p-4 rounded-lg border border-yellow-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-yellow-600 text-sm font-medium\">In Progress</p>\n                <p className=\"text-2xl font-bold text-yellow-900\">\n                  {pos.filter(po => po.status === 'in_progress').length}\n                </p>\n              </div>\n              <FiPlay className=\"text-yellow-500\" size={24} />\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 p-4 rounded-lg border border-purple-100\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-600 text-sm font-medium\">Active Vendors</p>\n                <p className=\"text-2xl font-bold text-purple-900\">{uniqueVendors.length}</p>\n              </div>\n              <FiUser className=\"text-purple-500\" size={24} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-2\">\n        <nav className=\"flex space-x-2\">\n          {['operations', 'vendors', 'completed'].map(tab => (\n            <button\n              key={tab}\n              onClick={() => setActiveTab(tab)}\n              className={`flex-1 py-3 px-4 rounded-lg font-medium text-sm transition-all duration-200 ${activeTab === tab\n                  ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg'\n                  : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                }`}\n            >\n              <div className=\"flex items-center justify-center space-x-2\">\n                {tab === 'operations' && <FiActivity size={16} />}\n                {tab === 'vendors' && <FiBarChart2 size={16} />}\n                {tab === 'completed' && <FiCheckCircle size={16} />}\n                <span className=\"capitalize\">{tab}</span>\n              </div>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Filters Sidebar */}\n        <aside className=\"lg:col-span-1 space-y-4\">\n          <div className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 sticky top-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Filters</h3>\n\n            <div className=\"space-y-4\">\n              <div className=\"relative\">\n                <FiSearch className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search POs or vendors...\"\n                  value={filters.search}\n                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                  className=\"w-full pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n                <select\n                  value={filters.status}\n                  onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"in_progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Operation</label>\n                <select\n                  value={filters.operation}\n                  onChange={(e) => setFilters(prev => ({ ...prev, operation: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Operations</option>\n                  {Object.keys(MACHINE_OPERATIONS).map(op => (\n                    <option key={op} value={op}>{MACHINE_OPERATIONS[op].name}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Vendor</label>\n                <select\n                  value={filters.vendor}\n                  onChange={(e) => setFilters(prev => ({ ...prev, vendor: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Vendors</option>\n                  {uniqueVendors.map(vendor => (\n                    <option key={vendor.id} value={vendor.id}>{vendor.name}</option>\n                  ))}\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Time Range</label>\n                <select\n                  value={filters.dateRange}\n                  onChange={(e) => setFilters(prev => ({ ...prev, dateRange: e.target.value }))}\n                  className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n                >\n                  <option value=\"all\">All Time</option>\n                  <option value=\"today\">Today</option>\n                  <option value=\"week\">This Week</option>\n                  <option value=\"month\">This Month</option>\n                </select>\n              </div>\n\n              <div className=\"flex items-center justify-between pt-2\">\n                <span className=\"text-xs text-gray-500\">{filteredPOs.length} POs</span>\n                <button\n                  className=\"text-xs text-indigo-600 hover:text-indigo-800\"\n                  onClick={() => setFilters({ status: 'all', operation: 'all', search: '', dateRange: 'all', vendor: 'all' })}\n                >\n                  Clear Filters\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Vendor Performance Summary */}\n\n        </aside>\n\n        {/* Main Content */}\n        <section className=\"lg:col-span-3\">\n          {activeTab === 'operations' && (\n            <OperationsTable\n              pos={filteredPOs}\n              vendors={vendors}\n              updating={updating}\n              onUpdateOperationStatus={updatePOOperationStatus}\n              onOpenTracker={openTracker}\n              onOpenStatusUpdateModal={openStatusUpdateModal}\n              getVendorName={getVendorName}\n              getStatusColor={getStatusColor}\n              getStatusIcon={getStatusIcon}\n              getOperationIcon={getOperationIcon}\n            />\n          )}\n\n          {activeTab === 'vendors' && (\n            <VendorsPerformance\n              vendorPerformance={vendorPerformance}\n              getVendorName={getVendorName}\n            />\n          )}\n\n          {activeTab === 'completed' && (\n            <CompletedOperations\n              completedOperations={completedOperations}\n              vendors={vendors}\n              getVendorName={getVendorName}\n            />\n          )}\n        </section>\n      </div>\n\n      {/* Operation Tracker Modal */}\n      {showTracker && selectedItem && (\n        <OperationTracker\n          item={selectedItem}\n          history={operationHistory}\n          onClose={() => {\n            setShowTracker(false);\n            setSelectedItem(null);\n            fetchData();\n          }}\n          getStatusColor={getStatusColor}\n          getStatusIcon={getStatusIcon}\n          getVendorName={getVendorName}\n        />\n      )}\n\n      {/* Status Update Modal */}\n      {/* Update the StatusUpdateModal usage in the main component */}\n      <StatusUpdateModal\n        isOpen={statusUpdateModal.isOpen}\n        onClose={closeStatusUpdateModal}\n        operation={statusUpdateModal.operation}\n        itemIndex={statusUpdateModal.itemIndex}\n        currentStatus={statusUpdateModal.currentStatus}\n        onStatusUpdate={handleStatusUpdate}\n        poData={pos.find(p => p.id === statusUpdateModal.poId)}\n      />\n    </div>\n  );\n}\n\n// Operations Table Component\n// Operations Table Component - UPDATED\nfunction OperationsTable({ pos, vendors, updating, onUpdateOperationStatus, onOpenTracker, onOpenStatusUpdateModal, getVendorName, getStatusColor, getStatusIcon, getOperationIcon }) {\n  const [expandedRow, setExpandedRow] = useState(null);\n\n  const toggleRowExpansion = (poId) => {\n    setExpandedRow(expandedRow === poId ? null : poId);\n  };\n\n  const handleStatusChange = (poId, operation, itemIndex, newStatus) => {\n    onUpdateOperationStatus(poId, operation, itemIndex, newStatus, `Status changed to ${newStatus}`);\n  };\n\n  // Helper function to get operations for a specific PO item\n  const getItemOperations = (item) => {\n    const operations = [];\n    if (item.operation && item.operation !== '') {\n      operations.push(item.operation);\n    }\n    return operations;\n  };\n\n  // Compute per-item progress based on operationsStatus (local to OperationsTable)\n  const getItemProgress = (po, itemIndex, item) => {\n    const itemOperations = getItemOperations(item);\n    if (itemOperations.length === 0) return 0;\n    const itemStatusMap = po.operationsStatus?.[itemIndex] || {};\n    const completed = itemOperations.filter(op => itemStatusMap[op] === 'completed').length;\n    return Math.round((completed / itemOperations.length) * 100);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n      {/* Mobile Card List - UPDATED */}\n      <div className=\"md:hidden divide-y divide-gray-100\">\n        {pos.map((po) => (\n          <div key={po.id} className=\"p-4\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <div className=\"text-sm text-gray-500\">PO</div>\n                <div className=\"text-base font-semibold text-gray-900\">{po.poNumber}</div>\n                <div className=\"text-xs text-gray-500\">{po.createdAt?.toDate?.()?.toLocaleDateString() || 'N/A'}</div>\n              </div>\n              <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${getStatusColor(po.status)}`}>\n                {getStatusIcon(po.status)}\n                <span className=\"ml-1 capitalize\">{po.status?.replace('_', ' ')}</span>\n              </span>\n            </div>\n            <div className=\"mt-3 flex items-center\">\n              <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-2\">\n                <div className=\"bg-indigo-600 h-2 rounded-full\" style={{ width: `${po.progress || 0}%` }} />\n              </div>\n              <span className=\"text-xs text-gray-700\">{po.progress || 0}%</span>\n            </div>\n            <div className=\"mt-2 text-sm text-gray-700\">Vendor: <span className=\"font-medium\">{getVendorName(po.vendorId)}</span></div>\n\n            {/* Operations grid - UPDATED to show operations per item with per-item progress */}\n            <div className=\"mt-3 space-y-3\">\n              {po.items?.map((item, itemIndex) => {\n                const itemOperations = getItemOperations(item);\n                if (itemOperations.length === 0) return null;\n                const itemProgress = getItemProgress(po, itemIndex, item);\n\n                return (\n                  <div key={itemIndex} className=\"border rounded-lg p-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {item.description || `Item ${itemIndex + 1}`}\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Qty: {item.quantity} {item.unit}</div>\n                    </div>\n\n                    <div className=\"flex items-center mb-2\">\n                      <div className=\"flex-1 bg-gray-200 rounded-full h-2 mr-2\">\n                        <div className=\"bg-indigo-600 h-2 rounded-full\" style={{ width: `${itemProgress}%` }} />\n                      </div>\n                      <span className=\"text-xs text-gray-700\">{itemProgress}%</span>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 gap-2\">\n                      {itemOperations.map((opKey) => {\n                        const status = po.operationsStatus?.[itemIndex]?.[opKey] || 'pending';\n                        const isUpdating = updating[`${po.id}_${itemIndex}_${opKey}`];\n\n                        return (\n                          <div key={opKey} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                            <div className=\"flex items-center\">\n                              {getOperationIcon(opKey)}\n                              <span className=\"ml-2 text-xs font-medium\">{MACHINE_OPERATIONS[opKey]?.name || opKey}</span>\n                            </div>\n\n                            <div className=\"flex items-center space-x-1\">\n                              <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-[10px] font-medium shadow-sm ring-1 ring-inset ring-gray-200 ${getStatusColor(status)}`}>\n                                <span className=\"capitalize\">{status.replace('_', ' ')}</span>\n                              </span>\n\n                              <div className=\"flex space-x-1\">\n                                <button\n                                  onClick={() => onOpenStatusUpdateModal(po.id, opKey, itemIndex, status)}\n                                  className=\"p-1.5 text-[10px] bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded hover:from-indigo-700 hover:to-purple-700 shadow-sm\"\n                                >Update</button>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"mt-3\">\n              <button\n                onClick={() => onOpenTracker(po, 'po')}\n                className=\"w-full text-center py-2 text-indigo-600 border border-indigo-200 rounded-lg hover:bg-indigo-50\"\n              >View Details</button>\n            </div>\n          </div>\n        ))}\n        {pos.length === 0 && (\n          <div className=\"p-6 text-center text-gray-500\">No purchase orders found</div>\n        )}\n      </div>\n\n      {/* Desktop/Tablet Table - UPDATED */}\n      <div className=\"hidden md:block overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50 sticky top-0 z-10\">\n            <tr>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                PO Details\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Vendor\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Progress\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n              <th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-200\">\n            {pos.map((po) => (\n              <React.Fragment key={po.id}>\n                <tr className=\"odd:bg-white even:bg-gray-50 hover:bg-indigo-50 cursor-pointer transition-colors\" onClick={() => toggleRowExpansion(po.id)}>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">{po.poNumber}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {po.createdAt?.toDate?.()?.toLocaleDateString() || 'N/A'}\n                        </div>\n                        <div className=\"text-xs text-gray-400\">\n                          {po.items?.length || 0} item{po.items?.length !== 1 ? 's' : ''}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{getVendorName(po.vendorId)}</div>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2.5 mr-4\">\n                        <div\n                          className=\"bg-indigo-600 h-2.5 rounded-full\"\n                          style={{ width: `${po.progress || 0}%` }}\n                        />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        {po.progress || 0}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium shadow-sm ring-1 ring-inset ring-gray-200 ${getStatusColor(po.status)}`}>\n                      {getStatusIcon(po.status)}\n                      <span className=\"ml-1 capitalize\">{po.status?.replace('_', ' ')}</span>\n                    </span>\n                  </td>\n                  <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium\">\n                    <div className=\"flex space-x-2\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onOpenTracker(po, 'po');\n                        }}\n                        className=\"text-indigo-600 hover:text-indigo-900 px-3 py-1.5 rounded-md hover:bg-indigo-50 transition\"\n                      >\n                        View Details\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n\n                {expandedRow === po.id && (\n                  <tr className=\"bg-gray-50\">\n                    <td colSpan={5} className=\"px-4 py-4\">\n                      <div className=\"space-y-4\">\n                        {po.items?.map((item, itemIndex) => {\n                          const itemOperations = getItemOperations(item);\n                          if (itemOperations.length === 0) return null;\n                          const itemProgress = getItemProgress(po, itemIndex, item);\n\n                          return (\n                            <div key={itemIndex} className=\"bg-white rounded-lg p-4 shadow-sm border border-gray-200\">\n                              <div className=\"flex items-center justify-between mb-3\">\n                                <div className=\"flex items-center\">\n                                  <FiPackage className=\"text-gray-400 mr-2\" />\n                                  <div>\n                                    <div className=\"text-sm font-medium text-gray-900\">\n                                      {item.description || `Item ${itemIndex + 1}`}\n                                    </div>\n                                    <div className=\"text-xs text-gray-500\">\n                                      Qty: {item.quantity} {item.unit} | Unit Price: ₹{item.unitPrice}\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Per-item progress */}\n                              <div className=\"flex items-center mb-3\">\n                                <div className=\"w-48 bg-gray-200 rounded-full h-2.5 mr-3\">\n                                  <div className=\"bg-indigo-600 h-2.5 rounded-full\" style={{ width: `${itemProgress}%` }} />\n                                </div>\n                                <span className=\"text-xs text-gray-700\">{itemProgress}%</span>\n                              </div>\n\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                                {itemOperations.map((opKey) => {\n                                  const status = po.operationsStatus?.[itemIndex]?.[opKey] || 'pending';\n                                  const isUpdating = updating[`${po.id}_${itemIndex}_${opKey}`];\n\n                                  return (\n                                    <div key={opKey} className=\"border rounded-lg p-3\">\n                                      <div className=\"flex items-center justify-between mb-2\">\n                                        <div className=\"flex items-center\">\n                                          {getOperationIcon(opKey)}\n                                          <div className=\"text-sm font-medium text-gray-900 ml-2\">\n                                            {MACHINE_OPERATIONS[opKey]?.name || opKey}\n                                          </div>\n                                        </div>\n                                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium shadow-sm ring-1 ring-inset ring-gray-200 ${getStatusColor(status)}`}>\n                                          {getStatusIcon(status)}\n                                          <span className=\"ml-1 capitalize\">{status.replace('_', ' ')}</span>\n                                        </span>\n                                      </div>\n\n                                      <div className=\"flex flex-col space-y-2\">\n                                        <button\n                                          onClick={() => onOpenStatusUpdateModal(po.id, opKey, itemIndex, status)}\n                                          className=\"w-full py-2 px-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-colors text-sm font-medium shadow-sm\"\n                                        >\n                                          Update Status\n                                        </button>\n\n                                        <div className=\"flex space-x-1\">\n                                          <button\n                                            onClick={() => handleStatusChange(po.id, opKey, itemIndex, 'pending')}\n                                            disabled={isUpdating || status === 'pending'}\n                                            className={`flex-1 py-1 px-2 text-xs rounded ${status === 'pending'\n                                                ? 'bg-yellow-100 text-yellow-800 border border-yellow-300'\n                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                              } ${isUpdating ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                          >\n                                            {isUpdating && status === 'pending' ? '...' : 'Pending'}\n                                          </button>\n\n                                          <button\n                                            onClick={() => handleStatusChange(po.id, opKey, itemIndex, 'in_progress')}\n                                            disabled={isUpdating || status === 'in_progress'}\n                                            className={`flex-1 py-1 px-2 text-xs rounded ${status === 'in_progress'\n                                                ? 'bg-blue-100 text-blue-800 border border-blue-300'\n                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                              } ${isUpdating ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                          >\n                                            {isUpdating && status === 'in_progress' ? '...' : 'Start'}\n                                          </button>\n\n                                          <button\n                                            onClick={() => handleStatusChange(po.id, opKey, itemIndex, 'completed')}\n                                            disabled={isUpdating || status === 'completed'}\n                                            className={`flex-1 py-1 px-2 text-xs rounded ${status === 'completed'\n                                                ? 'bg-green-100 text-green-800 border border-green-300'\n                                                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                                              } ${isUpdating ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                          >\n                                            {isUpdating && status === 'completed' ? '...' : 'Complete'}\n                                          </button>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n\n        {pos.length === 0 && (\n          <div className=\"text-center py-12\">\n            <FiFileText className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No purchase orders found</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">No purchase orders match your current filters.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Vendor Performance Component\nfunction VendorsPerformance({ vendorPerformance, getVendorName }) {\n  const formatTime = (milliseconds) => {\n    if (!milliseconds) return 'N/A';\n\n    const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Vendor Performance</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">Efficiency based on completed operations</p>\n      </div>\n      {/* Mobile Cards */}\n      <div className=\"md:hidden p-4 space-y-3\">\n        {Object.entries(vendorPerformance).length === 0 && (\n          <div className=\"text-center text-gray-500\">No vendor data available</div>\n        )}\n        {Object.entries(vendorPerformance)\n          .sort(([, a], [, b]) => b.efficiency - a.efficiency)\n          .map(([vendorId, data]) => (\n            <div key={vendorId} className=\"border rounded-xl p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"text-sm text-gray-500\">Vendor</div>\n                  <div className=\"text-base font-semibold text-gray-900\">{data.name}</div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-gray-500\">POs</div>\n                  <div className=\"font-semibold\">{data.totalPOs}</div>\n                </div>\n              </div>\n              <div className=\"mt-2 text-sm text-gray-700\">Completed Ops: <span className=\"font-medium\">{data.totalOperations}</span></div>\n              <div className=\"mt-2 flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-2\">\n                  <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: `${Math.min(data.efficiency, 100)}%` }} />\n                </div>\n                <span className=\"text-xs text-gray-700\">{Math.round(data.efficiency)}%</span>\n              </div>\n              <div className=\"mt-2 text-xs text-gray-500\">Avg. Time: {formatTime(data.averageCompletionTime)}</div>\n            </div>\n          ))}\n      </div>\n\n      <div className=\"hidden md:block overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Vendor\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Total POs\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Completed Operations\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Efficiency\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Avg. Completion Time\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {Object.entries(vendorPerformance)\n              .sort(([, a], [, b]) => b.efficiency - a.efficiency)\n              .map(([vendorId, data]) => (\n                <tr key={vendorId} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">{data.name}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{data.totalPOs}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{data.totalOperations}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2.5 mr-4\">\n                        <div\n                          className=\"bg-green-600 h-2.5 rounded-full\"\n                          style={{ width: `${Math.min(data.efficiency, 100)}%` }}\n                        />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        {Math.round(data.efficiency)}%\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-500\">\n                      {formatTime(data.averageCompletionTime)}\n                    </div>\n                  </td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n\n        {Object.keys(vendorPerformance).length === 0 && (\n          <div className=\"text-center py-12\">\n            <FiUser className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No vendor data available</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Vendor performance data will appear here once operations are completed.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n// Completed Operations Component\nfunction CompletedOperations({ completedOperations, getVendorName }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Completed Operations</h3>\n        <p className=\"mt-1 text-sm text-gray-500\">All machine operations that have been completed</p>\n      </div>\n      {/* Mobile Cards */}\n      <div className=\"md:hidden p-4 space-y-3\">\n        {completedOperations.length === 0 && (\n          <div className=\"text-center text-gray-500\">No completed operations</div>\n        )}\n        {completedOperations.map((op, index) => (\n          <div key={index} className=\"border rounded-xl p-4\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <div className=\"text-xs text-gray-500\">PO</div>\n                <div className=\"text-base font-semibold text-gray-900\">{op.poNumber}</div>\n                <div className=\"text-xs text-gray-500\">{op.completionDate?.toDate?.()?.toLocaleDateString() || 'N/A'}</div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-xs text-gray-500\">Operation</div>\n                <div className=\"text-sm font-medium\">{MACHINE_OPERATIONS[op.operation]?.name || op.operation}</div>\n                <div className=\"text-xs text-gray-500 mt-1\">Vendor: {op.vendor}</div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"hidden md:block overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                PO Number\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Operation\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Vendor\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Completed On\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {completedOperations.map((op, index) => (\n              <tr key={index} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm font-medium text-gray-900\">{op.poNumber}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">\n                    {MACHINE_OPERATIONS[op.operation]?.name || op.operation}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">{op.vendor}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-500\">\n                    {op.completionDate?.toDate?.()?.toLocaleDateString() || 'N/A'}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        {completedOperations.length === 0 && (\n          <div className=\"text-center py-12\">\n            <FiCheckCircle className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No completed operations</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">Completed operations will appear here once they're finished.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":["MACHINE_OPERATIONS","HBL","name","icon","FiTool","color","VTL","FiCpu","Drilling","FiZap","VMC","FiTarget","updatePOOperationStatusService","async","poId","operation","itemIndex","newStatus","user","notes","arguments","length","undefined","_items$itemIndex","_currentData$operatio","_items$itemIndex5","poRef","doc","db","poSnap","getDoc","exists","Error","currentData","data","currentOperationsStatus","operationsStatus","currentItemStatus","oldStatus","updatedItemStatus","updatedOperationsStatus","items","totalOperations","completedOperations","forEach","item","index","itemOperations","Object","keys","op","progress","Math","round","derivedStatus","status","values","some","itemStatus","batch","writeBatch","baseMeta","updatedAt","serverTimestamp","updatedBy","uid","email","displayName","itemDescription","description","extraMeta","startedAt","completedAt","operationKey","update","operationsMeta","_items$itemIndex2","vendorId","vendorName","vendor","poNumber","title","priority","taskStatus","_MACHINE_OPERATIONS$o","_MACHINE_OPERATIONS$o2","_MACHINE_OPERATIONS$o3","_MACHINE_OPERATIONS$o4","_MACHINE_OPERATIONS$o5","deterministicId","Date","toISOString","slice","taskRef","set","assignedTo","dueDate","category","completed","department","equipment","estimatedTime","safetyNotes","sequence","step","createdAt","source","autoGenerated","_items$itemIndex3","_items$itemIndex4","_MACHINE_OPERATIONS$o6","dateKey","todoId","todoRef","opLower","toString","toLowerCase","operationType","includes","bodiesCount","quantity","Number","date","vendors","totalBodies","targetLocation","merge","e","console","warn","message","getDocs","query","collection","where","dcDoc","id","poStatus","poProgress","mapPOToJobStatus","updates","j","push","jobStatus","jobId","historyRef","itemId","itemType","userId","userName","timestamp","commit","error","OperationTracker","_ref","_item$status","history","onClose","getStatusColor","getStatusIcon","getVendorName","_jsx","className","children","_jsxs","onClick","FiX","size","replace","map","record","_MACHINE_OPERATIONS$r","_record$timestamp","_record$timestamp$toD","toDate","call","toLocaleString","StatusUpdateModal","_ref2","_poData$items","_poData$items$itemInd","_MACHINE_OPERATIONS$o7","isOpen","currentStatus","onStatusUpdate","poData","setNotes","useState","selectedStatus","setSelectedStatus","updating","setUpdating","useEffect","FiClock","FiPlay","FiCheckCircle","value","onChange","target","placeholder","rows","disabled","_Fragment","StatusManager","showSuccess","showError","useNotification","currentUser","useAuth","jobs","setJobs","pos","setPOs","setVendors","loading","setLoading","activeTab","setActiveTab","selectedItem","setSelectedItem","showTracker","setShowTracker","operationHistory","setOperationHistory","filters","setFilters","search","dateRange","viewMode","setViewMode","selectedItems","setSelectedItems","isMobile","setIsMobile","sortConfig","setSortConfig","key","direction","autoRefresh","setAutoRefresh","refreshIntervalRef","useRef","setCompletedOperations","vendorPerformance","setVendorPerformance","statusUpdateModal","setStatusUpdateModal","saved","localStorage","getItem","parsed","JSON","parse","prev","fetchData","checkMobile","window","innerWidth","addEventListener","removeEventListener","current","clearInterval","setInterval","setItem","stringify","performance","vendorPOs","filter","po","completedOps","entries","_ref3","_ref4","_po$items","_po$items$parseInt","parseInt","completionDate","_po$items2","getItemOperations","totalPOs","efficiency","averageCompletionTime","calculateAverageCompletionTime","flatMap","v","sort","a","b","operations","totalTime","count","_ref5","meta","startTime","endTime","jobsSnapshot","posSnapshot","vendorsSnapshot","Promise","all","orderBy","jobsData","posData","vendorsData","updatePOOperationStatus","_po$operationsStatus","_po$operationsStatus$","find","p","_p$operationsStatus","idx","itemOps","FiAlertCircle","filteredPOs","useMemo","_po$poNumber","matchesStatus","matchesVendor","matchesOperation","matchesSearch","matchesDate","poDate","now","daysDiff","floor","aVal","bVal","uniqueVendors","Set","FiActivity","FiBell","FiRefreshCw","FiFileText","FiUser","tab","FiBarChart2","FiSearch","type","OperationsTable","onUpdateOperationStatus","onOpenTracker","openTracker","historyQuery","snapshot","_a$timestamp$toDate$g","_a$timestamp","_a$timestamp$toDate","_a$timestamp$toDate$c","_a$timestamp$toDate$c2","_b$timestamp$toDate$g","_b$timestamp","_b$timestamp$toDate","_b$timestamp$toDate$c","_b$timestamp$toDate$c2","at","getTime","fetchOperationHistory","onOpenStatusUpdateModal","openStatusUpdateModal","getOperationIcon","_MACHINE_OPERATIONS$o8","_MACHINE_OPERATIONS$o9","OperationIcon","colorClass","VendorsPerformance","CompletedOperations","closeStatusUpdateModal","_ref6","expandedRow","setExpandedRow","handleStatusChange","getItemProgress","_po$operationsStatus2","itemStatusMap","_po$createdAt","_po$createdAt$toDate","_po$createdAt$toDate$","_po$status","_po$items3","toLocaleDateString","style","width","itemProgress","unit","opKey","_po$operationsStatus3","_po$operationsStatus4","_MACHINE_OPERATIONS$o0","scope","_po$createdAt2","_po$createdAt2$toDate","_po$createdAt2$toDate2","_po$items4","_po$items5","_po$status2","_po$items6","React","toggleRowExpansion","stopPropagation","colSpan","FiPackage","unitPrice","_po$operationsStatus5","_po$operationsStatus6","_MACHINE_OPERATIONS$o1","isUpdating","_ref7","formatTime","milliseconds","hours","minutes","_ref8","_ref9","_ref0","min","_ref1","_ref10","_ref11","_ref12","_op$completionDate","_op$completionDate$to","_op$completionDate$to2","_MACHINE_OPERATIONS$o10","_MACHINE_OPERATIONS$o11","_op$completionDate2","_op$completionDate2$t","_op$completionDate2$t2"],"sourceRoot":""}