{"version":3,"file":"static/js/563.4e5a2bef.chunk.js","mappings":"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","sources":["services/vendorService.js","components/Admin/VendorBulkOperations.jsx"],"sourcesContent":["import { collection, addDoc, getDocs, getDoc, updateDoc, deleteDoc, doc, serverTimestamp, query, orderBy, where, writeBatch } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nconst VENDORS_COLLECTION = 'vendors';\r\nconst VENDOR_ACTIVITY_COLLECTION = 'vendorActivity';\r\n\r\n// Normalize vendor data coming from UI before saving\r\nexport function normalizeVendorForSave(raw) {\r\n\tconst numeric = (v) => (v === '' || v === null || v === undefined ? null : Number(v));\r\n\treturn {\r\n\t\tname: String(raw.name || '').trim(),\r\n\t\temail: String(raw.email || '').trim().toLowerCase(),\r\n\t\tphone: String(raw.phone || '').trim(),\r\n\t\taddress: String(raw.address || '').trim(),\r\n\t\tcity: String(raw.city || '').trim(),\r\n\t\tstate: String(raw.state || '').trim(),\r\n\t\tzipCode: String(raw.zipCode || '').trim(),\r\n\t\tcountry: String(raw.country || 'India').trim(),\r\n\t\twebsite: String(raw.website || '').trim(),\r\n\t\tcontactPerson: String(raw.contactPerson || '').trim(),\r\n\t\tcontactPhone: String(raw.contactPhone || '').trim(),\r\n\t\tcontactEmail: String(raw.contactEmail || '').trim().toLowerCase(),\r\n\t\tcategory: String(raw.category || '').trim(),\r\n\t\trating: numeric(raw.rating) ?? 0,\r\n\t\tgstNumber: String(raw.gstNumber || '').trim(),\r\n\t\tpanNumber: String(raw.panNumber || '').trim(),\r\n\t\tbankDetails: {\r\n\t\t\taccountNumber: String(raw.bankDetails?.accountNumber || '').trim(),\r\n\t\t\tifscCode: String(raw.bankDetails?.ifscCode || '').trim(),\r\n\t\t\tbankName: String(raw.bankDetails?.bankName || '').trim(),\r\n\t\t\taccountHolderName: String(raw.bankDetails?.accountHolderName || '').trim(),\r\n\t\t},\r\n\t\tservices: Array.isArray(raw.services) ? raw.services.filter(Boolean) : [],\r\n\t\tstatus: raw.status || 'active',\r\n\t\tnotes: String(raw.notes || '').trim(),\r\n\t\testablishedYear: numeric(raw.establishedYear),\r\n\t\temployeeCount: numeric(raw.employeeCount),\r\n\t\tannualRevenue: numeric(raw.annualRevenue),\r\n\t\tcreditLimit: numeric(raw.creditLimit),\r\n\t\tpreferredPaymentTerms: numeric(raw.preferredPaymentTerms) ?? 30,\r\n\t\ttaxId: String(raw.taxId || '').trim(),\r\n\t};\r\n}\r\n\r\n// Safely map Firestore doc to UI shape with defaults\r\nexport function mapVendorFromDoc(docSnap) {\r\n\tconst data = docSnap.data() || {};\r\n\treturn {\r\n\t\tid: docSnap.id,\r\n\t\tname: data.name || '',\r\n\t\temail: data.email || '',\r\n\t\tphone: data.phone || '',\r\n\t\taddress: data.address || '',\r\n\t\tcity: data.city || '',\r\n\t\tstate: data.state || '',\r\n\t\tzipCode: data.zipCode || '',\r\n\t\tcountry: data.country || 'India',\r\n\t\twebsite: data.website || '',\r\n\t\tcontactPerson: data.contactPerson || '',\r\n\t\tcontactPhone: data.contactPhone || '',\r\n\t\tcontactEmail: data.contactEmail || '',\r\n\t\tcategory: data.category || '',\r\n\t\trating: typeof data.rating === 'number' ? data.rating : Number(data.rating || 0),\r\n\t\tgstNumber: data.gstNumber || '',\r\n\t\tpanNumber: data.panNumber || '',\r\n\t\tbankDetails: {\r\n\t\t\taccountNumber: data.bankDetails?.accountNumber || '',\r\n\t\t\tifscCode: data.bankDetails?.ifscCode || '',\r\n\t\t\tbankName: data.bankDetails?.bankName || '',\r\n\t\t\taccountHolderName: data.bankDetails?.accountHolderName || '',\r\n\t\t},\r\n\t\tservices: Array.isArray(data.services) ? data.services : [],\r\n\t\tstatus: data.status || 'active',\r\n\t\tnotes: data.notes || '',\r\n\t\testablishedYear: data.establishedYear ?? '',\r\n\t\temployeeCount: data.employeeCount ?? '',\r\n\t\tannualRevenue: data.annualRevenue ?? '',\r\n\t\tcreditLimit: data.creditLimit ?? '',\r\n\t\tpreferredPaymentTerms: data.preferredPaymentTerms ?? 30,\r\n\t\ttaxId: data.taxId || '',\r\n\t\tcreatedAt: data.createdAt,\r\n\t\tupdatedAt: data.updatedAt,\r\n\t};\r\n}\r\n\r\nexport async function getVendorsOrdered() {\r\n\tconst q = query(collection(db, VENDORS_COLLECTION), orderBy('createdAt', 'desc'));\r\n\tconst snapshot = await getDocs(q);\r\n\treturn snapshot.docs.map(mapVendorFromDoc);\r\n}\r\n\r\nexport async function getAllVendors() {\r\n\tconst snapshot = await getDocs(collection(db, VENDORS_COLLECTION));\r\n\treturn snapshot.docs.map(mapVendorFromDoc);\r\n}\r\n\r\nexport async function getVendorById(id) {\r\n\tconst snap = await getDoc(doc(db, VENDORS_COLLECTION, id));\r\n\tif (!snap.exists()) return null;\r\n\treturn mapVendorFromDoc(snap);\r\n}\r\n\r\nasync function findDuplicateVendor(email, phone, excludeId) {\r\n\tconst dupCandidates = [];\r\n\tif (email) {\r\n\t\tconst emailQ = query(collection(db, VENDORS_COLLECTION), where('email', '==', email));\r\n\t\tconst emailSnap = await getDocs(emailQ);\r\n\t\temailSnap.forEach((d) => dupCandidates.push(d));\r\n\t}\r\n\tif (phone) {\r\n\t\tconst phoneQ = query(collection(db, VENDORS_COLLECTION), where('phone', '==', phone));\r\n\t\tconst phoneSnap = await getDocs(phoneQ);\r\n\t\tphoneSnap.forEach((d) => dupCandidates.push(d));\r\n\t}\r\n\r\n\tfor (const d of dupCandidates) {\r\n\t\tif (!excludeId || d.id !== excludeId) {\r\n\t\t\tconst data = d.data();\r\n\t\t\tif (email && data.email === email && (!excludeId || d.id !== excludeId)) {\r\n\t\t\t\treturn { type: 'email', id: d.id };\r\n\t\t\t}\r\n\t\t\tif (phone && data.phone === phone && (!excludeId || d.id !== excludeId)) {\r\n\t\t\t\treturn { type: 'phone', id: d.id };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nasync function logVendorActivity(vendorId, action, details) {\r\n\ttry {\r\n\t\tawait addDoc(collection(db, VENDOR_ACTIVITY_COLLECTION), {\r\n\t\t\tvendorId,\r\n\t\t\taction,\r\n\t\t\tdetails: details || {},\r\n\t\t\ttimestamp: serverTimestamp(),\r\n\t\t});\r\n\t} catch (_) {\r\n\t\t// Best effort logging; ignore failures\r\n\t}\r\n}\r\n\r\nexport async function createVendor(raw) {\r\n\tconst data = normalizeVendorForSave(raw);\r\n\tconst duplicate = await findDuplicateVendor(data.email, data.phone);\r\n\tif (duplicate) {\r\n\t\tconst err = new Error(duplicate.type === 'email' ? 'DUPLICATE_VENDOR_EMAIL' : 'DUPLICATE_VENDOR_PHONE');\r\n\t\tthrow err;\r\n\t}\r\n\tconst now = serverTimestamp();\r\n\tconst ref = await addDoc(collection(db, VENDORS_COLLECTION), { ...data, createdAt: now, updatedAt: now });\r\n\tawait logVendorActivity(ref.id, 'create', { name: data.name, email: data.email });\r\n}\r\n\r\n// Get vendors with WhatsApp auto-send enabled (simplified query)\r\nexport async function getVendorsWithWhatsAppAutoSend() {\r\n\ttry {\r\n\t\t// Use a simpler query to avoid composite index issues\r\n\t\tconst q = query(\r\n\t\t\tcollection(db, VENDORS_COLLECTION),\r\n\t\t\twhere('status', '==', 'active')\r\n\t\t);\r\n\t\tconst snapshot = await getDocs(q);\r\n\t\t\r\n\t\t// Filter in memory to avoid complex Firestore queries\r\n\t\treturn snapshot.docs\r\n\t\t\t.map(mapVendorFromDoc)\r\n\t\t\t.filter(vendor => \r\n\t\t\t\tvendor.whatsappAutoSend === true && \r\n\t\t\t\tvendor.phone && \r\n\t\t\t\tvendor.phone.trim() !== ''\r\n\t\t\t);\r\n\t} catch (error) {\r\n\t\tconsole.error('Error fetching vendors with WhatsApp auto-send:', error);\r\n\t\t// Return empty array instead of throwing to prevent app crashes\r\n\t\treturn [];\r\n\t}\r\n}\r\n\r\n// Update vendor WhatsApp settings\r\nexport async function updateVendorWhatsAppSettings(vendorId, settings) {\r\n\ttry {\r\n\t\tconst vendorRef = doc(db, VENDORS_COLLECTION, vendorId);\r\n\t\tawait updateDoc(vendorRef, {\r\n\t\t\twhatsappAutoSend: settings.autoSend || false,\r\n\t\t\twhatsappTemplate: settings.template || 'default',\r\n\t\t\twhatsappEnabled: settings.enabled || false,\r\n\t\t\tupdatedAt: serverTimestamp()\r\n\t\t});\r\n\r\n\t\t// Log activity\r\n\t\tawait logVendorActivity(vendorId, 'updated', {\r\n\t\t\tchanges: `WhatsApp settings updated: ${JSON.stringify(settings)}`\r\n\t\t});\r\n\r\n\t\treturn { success: true };\r\n\t} catch (error) {\r\n\t\tconsole.error('Error updating vendor WhatsApp settings:', error);\r\n\t\tthrow error;\r\n\t}\r\n}\r\n\r\nexport async function updateVendor(id, raw) {\r\n\tconst data = normalizeVendorForSave(raw);\r\n\tconst duplicate = await findDuplicateVendor(data.email, data.phone, id);\r\n\tif (duplicate) {\r\n\t\tconst err = new Error(duplicate.type === 'email' ? 'DUPLICATE_VENDOR_EMAIL' : 'DUPLICATE_VENDOR_PHONE');\r\n\t\tthrow err;\r\n\t}\r\n\tawait updateDoc(doc(db, VENDORS_COLLECTION, id), { ...data, updatedAt: serverTimestamp() });\r\n\tawait logVendorActivity(id, 'update', { name: data.name, email: data.email });\r\n}\r\n\r\nexport async function deleteVendor(id) {\r\n\tawait deleteDoc(doc(db, VENDORS_COLLECTION, id));\r\n\tawait logVendorActivity(id, 'delete');\r\n}\r\n\r\nexport async function bulkUpdateVendors(ids, fields) {\r\n\tconst batch = writeBatch(db);\r\n\tids.forEach((id) => {\r\n\t\tbatch.update(doc(db, VENDORS_COLLECTION, id), { ...fields, updatedAt: serverTimestamp() });\r\n\t});\r\n\tawait batch.commit();\r\n\tfor (const id of ids) {\r\n\t\tlogVendorActivity(id, 'bulk_update', { fields });\r\n\t}\r\n}\r\n\r\nexport async function bulkDeleteVendors(ids) {\r\n\tconst batch = writeBatch(db);\r\n\tids.forEach((id) => batch.delete(doc(db, VENDORS_COLLECTION, id)));\r\n\tawait batch.commit();\r\n\tfor (const id of ids) {\r\n\t\tlogVendorActivity(id, 'bulk_delete');\r\n\t}\r\n}\r\n\r\nexport async function queryPOsByVendorId(vendorId) {\r\n\tconst q = query(collection(db, 'purchaseOrders'), where('vendorId', '==', vendorId));\r\n\tconst snapshot = await getDocs(q);\r\n\treturn snapshot.docs.map((d) => d.data());\r\n}\r\n\r\nexport async function queryJobsByVendorId(vendorId) {\r\n\tconst q = query(collection(db, 'jobAssignments'), where('vendorId', '==', vendorId));\r\n\tconst snapshot = await getDocs(q);\r\n\treturn snapshot.docs.map((d) => d.data());\r\n}\r\n\r\nexport async function computeVendorStats(vendors) {\r\n\tconst stats = {};\r\n\tfor (const vendor of vendors) {\r\n\t\ttry {\r\n\t\t\tconst [pos, jobs] = await Promise.all([\r\n\t\t\t\tqueryPOsByVendorId(vendor.id),\r\n\t\t\t\tqueryJobsByVendorId(vendor.id),\r\n\t\t\t]);\r\n\t\t\tstats[vendor.id] = {\r\n\t\t\t\ttotalPOs: pos.length,\r\n\t\t\t\ttotalJobs: jobs.length,\r\n\t\t\t\ttotalSpend: pos.reduce((sum, po) => sum + (parseFloat(po.totalAmount) || 0), 0),\r\n\t\t\t\tcompletedJobs: jobs.filter((job) => job.status === 'completed').length,\r\n\t\t\t\tpendingPOs: pos.filter((po) => po.status === 'pending').length,\r\n\t\t\t\tavgRating: vendor.rating || 0,\r\n\t\t\t\tlastActivity: Math.max(\r\n\t\t\t\t\t...pos.map((po) => po.createdAt?.toDate?.()?.getTime() || 0),\r\n\t\t\t\t\t...jobs.map((job) => job.createdAt?.toDate?.()?.getTime() || 0)\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t} catch (e) {\r\n\t\t\tstats[vendor.id] = {\r\n\t\t\t\ttotalPOs: 0,\r\n\t\t\t\ttotalJobs: 0,\r\n\t\t\t\ttotalSpend: 0,\r\n\t\t\t\tcompletedJobs: 0,\r\n\t\t\t\tpendingPOs: 0,\r\n\t\t\t\tavgRating: 0,\r\n\t\t\t\tlastActivity: 0,\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\treturn stats;\r\n}\r\n","import { useState, useEffect } from 'react';\nimport { getAllVendors, bulkUpdateVendors, bulkDeleteVendors, createVendor } from '../../services/vendorService';\nimport { useNotification } from './NotificationSystem';\nimport {\n  FiCheck, FiX, FiEdit2, FiTrash2, FiDownload, FiUpload,\n  FiFilter, FiSearch, FiMoreVertical, FiTag, FiStar, FiCopy,\n  FiMail, FiPhone, FiFileText, FiRefreshCw, FiSettings,\n  FiUsers, FiBarChart2, FiAlertTriangle, FiCheckCircle\n} from 'react-icons/fi';\n\nexport default function VendorBulkOperations() {\n  const { showSuccess, showError, showWarning } = useNotification();\n  const [vendors, setVendors] = useState([]);\n  const [selectedVendors, setSelectedVendors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [bulkLoading, setBulkLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [showBulkActions, setShowBulkActions] = useState(false);\n  const [showBulkUpdateModal, setShowBulkUpdateModal] = useState(false);\n  const [showImportModal, setShowImportModal] = useState(false);\n  const [bulkUpdateData, setBulkUpdateData] = useState({\n    status: '',\n    category: '',\n    rating: '',\n    notes: '',\n    tags: []\n  });\n  const [importData, setImportData] = useState('');\n  const [operationHistory, setOperationHistory] = useState([]);\n\n  useEffect(() => {\n    fetchVendors();\n  }, []);\n\n  const fetchVendors = async () => {\n    try {\n      setLoading(true);\n      const vendorsData = await getAllVendors();\n      setVendors(vendorsData);\n    } catch (error) {\n      console.error('Error fetching vendors:', error);\n      showError('Failed to load vendors');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredVendors = vendors.filter(vendor => {\n    const matchesSearch = (vendor.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (vendor.email || '').toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || vendor.status === statusFilter;\n    const matchesCategory = categoryFilter === 'all' || vendor.category === categoryFilter;\n    \n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n\n  const handleSelectAll = () => {\n    if (selectedVendors.length === filteredVendors.length) {\n      setSelectedVendors([]);\n    } else {\n      setSelectedVendors(filteredVendors.map(vendor => vendor.id));\n    }\n  };\n\n  const handleSelectVendor = (vendorId) => {\n    setSelectedVendors(prev => \n      prev.includes(vendorId) \n        ? prev.filter(id => id !== vendorId)\n        : [...prev, vendorId]\n    );\n  };\n\n  const handleBulkStatusUpdate = async (newStatus) => {\n    if (selectedVendors.length === 0) {\n      showWarning('Please select vendors to update');\n      return;\n    }\n\n    try {\n      setBulkLoading(true);\n      await bulkUpdateVendors(selectedVendors, { status: newStatus });\n      showSuccess(`Updated status for ${selectedVendors.length} vendors`);\n      setSelectedVendors([]);\n      fetchVendors();\n    } catch (error) {\n      console.error('Error updating vendors:', error);\n      showError('Failed to update vendor status');\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleBulkCategoryUpdate = async (newCategory) => {\n    if (selectedVendors.length === 0) {\n      showWarning('Please select vendors to update');\n      return;\n    }\n\n    try {\n      setBulkLoading(true);\n      await bulkUpdateVendors(selectedVendors, { category: newCategory });\n      showSuccess(`Updated category for ${selectedVendors.length} vendors`);\n      setSelectedVendors([]);\n      fetchVendors();\n    } catch (error) {\n      console.error('Error updating vendors:', error);\n      showError('Failed to update vendor category');\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleBulkDelete = async () => {\n    if (selectedVendors.length === 0) {\n      showWarning('Please select vendors to delete');\n      return;\n    }\n\n    if (!window.confirm(`Are you sure you want to delete ${selectedVendors.length} vendors? This action cannot be undone.`)) {\n      return;\n    }\n\n    try {\n      setBulkLoading(true);\n      await bulkDeleteVendors(selectedVendors);\n      showSuccess(`Deleted ${selectedVendors.length} vendors`);\n      setSelectedVendors([]);\n      fetchVendors();\n    } catch (error) {\n      console.error('Error deleting vendors:', error);\n      showError('Failed to delete vendors');\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleBulkRatingUpdate = async (newRating) => {\n    if (selectedVendors.length === 0) {\n      showWarning('Please select vendors to update');\n      return;\n    }\n\n    try {\n      setBulkLoading(true);\n      await bulkUpdateVendors(selectedVendors, { rating: newRating });\n      showSuccess(`Updated rating for ${selectedVendors.length} vendors`);\n      setSelectedVendors([]);\n      fetchVendors();\n      logOperation('Bulk Rating Update', selectedVendors.length, `Set rating to ${newRating}`);\n    } catch (error) {\n      console.error('Error updating vendors:', error);\n      showError('Failed to update vendor ratings');\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleBulkNotesUpdate = async (notes) => {\n    if (selectedVendors.length === 0) {\n      showWarning('Please select vendors to update');\n      return;\n    }\n\n    try {\n      setBulkLoading(true);\n      await bulkUpdateVendors(selectedVendors, { notes });\n      showSuccess(`Updated notes for ${selectedVendors.length} vendors`);\n      setSelectedVendors([]);\n      fetchVendors();\n      logOperation('Bulk Notes Update', selectedVendors.length, 'Updated notes');\n    } catch (error) {\n      console.error('Error updating vendors:', error);\n      showError('Failed to update vendor notes');\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleDuplicateVendors = async () => {\n    if (selectedVendors.length === 0) {\n      showWarning('Please select vendors to duplicate');\n      return;\n    }\n\n    try {\n      setBulkLoading(true);\n      const selectedVendorData = vendors.filter(vendor => selectedVendors.includes(vendor.id));\n      \n      for (const vendor of selectedVendorData) {\n        const duplicateData = { ...vendor };\n        delete duplicateData.id;\n        delete duplicateData.createdAt;\n        delete duplicateData.updatedAt;\n        await createVendor({\n          ...duplicateData,\n          name: `${vendor.name} (Copy)`,\n          email: `copy_${vendor.email}`,\n        });\n      }\n\n      showSuccess(`Duplicated ${selectedVendors.length} vendors`);\n      setSelectedVendors([]);\n      fetchVendors();\n      logOperation('Bulk Duplicate', selectedVendors.length, 'Created duplicates');\n    } catch (error) {\n      console.error('Error duplicating vendors:', error);\n      showError('Failed to duplicate vendors');\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const handleExportSelected = () => {\n    if (selectedVendors.length === 0) {\n      showWarning('Please select vendors to export');\n      return;\n    }\n\n    const selectedVendorData = vendors.filter(vendor => selectedVendors.includes(vendor.id));\n    const csvContent = [\n      ['Name', 'Email', 'Phone', 'Status', 'Category', 'Rating', 'Contact Person', 'City', 'GST Number', 'Created Date'].join(','),\n      ...selectedVendorData.map(vendor => [\n        vendor.name,\n        vendor.email,\n        vendor.phone,\n        vendor.status,\n        vendor.category || '',\n        vendor.rating || 0,\n        vendor.contactPerson || '',\n        vendor.city || '',\n        vendor.gstNumber || '',\n        vendor.createdAt?.toDate?.()?.toLocaleDateString() || ''\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `selected-vendors-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    showSuccess('Selected vendors exported successfully');\n    logOperation('Export', selectedVendors.length, 'Exported to CSV');\n  };\n\n  const handleImportVendors = async () => {\n    if (!importData.trim()) {\n      showWarning('Please enter vendor data to import');\n      return;\n    }\n\n    try {\n      setBulkLoading(true);\n      const lines = importData.trim().split('\\n');\n      const headers = lines[0].split(',').map(h => h.trim());\n      const vendorData = lines.slice(1);\n\n      let importedCount = 0;\n      let skippedCount = 0;\n      const requiredFields = ['name', 'email'];\n      const headerSet = new Set(headers.map(h => h.toLowerCase().replace(/\\s+/g, '')));\n      for (const field of requiredFields) {\n        if (!headerSet.has(field)) {\n          throw new Error('INVALID_TEMPLATE');\n        }\n      }\n      for (const line of vendorData) {\n        const values = line.split(',').map(v => v.trim());\n        const vendor = {};\n        \n        headers.forEach((header, index) => {\n          vendor[header.toLowerCase().replace(/\\s+/g, '')] = values[index] || '';\n        });\n\n        if (vendor.name && vendor.email) {\n          const payload = {\n            ...vendor,\n            status: vendor.status || 'pending',\n            rating: parseFloat(vendor.rating) || 0,\n          };\n          try {\n            await createVendor(payload);\n            importedCount++;\n          } catch (e) {\n            if (e?.message === 'DUPLICATE_VENDOR_EMAIL' || e?.message === 'DUPLICATE_VENDOR_PHONE') {\n              skippedCount++;\n            } else {\n              throw e;\n            }\n          }\n        }\n      }\n\n      showSuccess(`Imported ${importedCount} vendors${skippedCount ? `, skipped ${skippedCount} duplicates` : ''}`);\n      setImportData('');\n      setShowImportModal(false);\n      fetchVendors();\n      logOperation('Import', importedCount, 'Imported from CSV');\n    } catch (error) {\n      console.error('Error importing vendors:', error);\n      if (error?.message === 'INVALID_TEMPLATE') {\n        showError('Invalid CSV template. Required columns: name, email');\n      } else if (error?.message === 'DUPLICATE_VENDOR_EMAIL') {\n        showError('Duplicate email found in import');\n      } else if (error?.message === 'DUPLICATE_VENDOR_PHONE') {\n        showError('Duplicate phone found in import');\n      } else {\n        showError('Failed to import vendors');\n      }\n    } finally {\n      setBulkLoading(false);\n    }\n  };\n\n  const logOperation = (operation, count, details) => {\n    const newOperation = {\n      id: Date.now(),\n      operation,\n      count,\n      details,\n      timestamp: new Date(),\n      user: 'Admin' // In a real app, this would be the current user\n    };\n    setOperationHistory(prev => [newOperation, ...prev.slice(0, 9)]); // Keep last 10 operations\n  };\n\n  const getUniqueCategories = () => {\n    const categories = vendors\n      .map(vendor => vendor.category)\n      .filter(category => category && category.trim() !== '')\n      .filter((category, index, arr) => arr.indexOf(category) === index)\n      .sort();\n    return categories;\n  };\n\n  const getStatusBadge = (status) => {\n    const statusStyles = {\n      active: 'bg-green-100 text-green-800',\n      inactive: 'bg-red-100 text-red-800',\n      pending: 'bg-yellow-100 text-yellow-800'\n    };\n\n    return (\n      <span className={`px-2 py-1 rounded-full text-xs font-medium ${statusStyles[status] || 'bg-gray-100 text-gray-800'}`}>\n        {status?.charAt(0).toUpperCase() + status?.slice(1)}\n      </span>\n    );\n  };\n\n  const renderRating = (rating) => {\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <FiStar\n          key={i}\n          size={14}\n          className={i <= (rating || 0) ? 'text-yellow-400 fill-current' : 'text-gray-300'}\n        />\n      );\n    }\n    return <div className=\"flex\">{stars}</div>;\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Vendor Bulk Operations</h1>\n        <p className=\"text-gray-600\">Manage multiple vendors efficiently with bulk operations</p>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"bg-white p-4 rounded-lg shadow-sm border border-gray-200 mb-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"relative\">\n            <FiSearch className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n            <input\n              type=\"text\"\n              placeholder=\"Search vendors...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          <div className=\"relative\">\n            <FiFilter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"active\">Active</option>\n              <option value=\"inactive\">Inactive</option>\n              <option value=\"pending\">Pending</option>\n            </select>\n          </div>\n\n          <div className=\"relative\">\n            <FiTag className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" size={16} />\n            <select\n              value={categoryFilter}\n              onChange={(e) => setCategoryFilter(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none\"\n            >\n              <option value=\"all\">All Categories</option>\n              {getUniqueCategories().map(category => (\n                <option key={category} value={category}>{category}</option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"flex items-center text-sm text-gray-600\">\n            Showing {filteredVendors.length} of {vendors.length} vendors\n          </div>\n        </div>\n      </div>\n\n      {/* Bulk Actions Bar */}\n      {selectedVendors.length > 0 && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-blue-800 font-medium\">\n                {selectedVendors.length} vendor{selectedVendors.length > 1 ? 's' : ''} selected\n              </span>\n              <button\n                onClick={() => setSelectedVendors([])}\n                className=\"text-blue-600 hover:text-blue-800 text-sm\"\n              >\n                Clear selection\n              </button>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowBulkActions(!showBulkActions)}\n                  className=\"flex items-center px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm\"\n                  disabled={bulkLoading}\n                >\n                  <FiMoreVertical className=\"mr-2\" size={16} />\n                  Bulk Actions\n                </button>\n                \n                {showBulkActions && (\n                  <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg border border-gray-200 z-10\">\n                    <div className=\"py-1\">\n                      <div className=\"px-3 py-2 text-xs font-medium text-gray-500 uppercase border-b\">\n                        Update Status\n                      </div>\n                      <button\n                        onClick={() => handleBulkStatusUpdate('active')}\n                        className=\"block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                        disabled={bulkLoading}\n                      >\n                        Mark as Active\n                      </button>\n                      <button\n                        onClick={() => handleBulkStatusUpdate('inactive')}\n                        className=\"block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                        disabled={bulkLoading}\n                      >\n                        Mark as Inactive\n                      </button>\n                      <button\n                        onClick={() => handleBulkStatusUpdate('pending')}\n                        className=\"block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                        disabled={bulkLoading}\n                      >\n                        Mark as Pending\n                      </button>\n                      \n                      <div className=\"border-t border-gray-100 mt-1\">\n                        <div className=\"px-3 py-2 text-xs font-medium text-gray-500 uppercase\">\n                          Category\n                        </div>\n                        {getUniqueCategories().map(category => (\n                          <button\n                            key={category}\n                            onClick={() => handleBulkCategoryUpdate(category)}\n                            className=\"block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                            disabled={bulkLoading}\n                          >\n                            Set to {category}\n                          </button>\n                        ))}\n                      </div>\n                      \n                      <div className=\"border-t border-gray-100 mt-1\">\n                        <button\n                          onClick={handleExportSelected}\n                          className=\"block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                        >\n                          <FiDownload className=\"inline mr-2\" size={14} />\n                          Export Selected\n                        </button>\n                        <button\n                          onClick={handleBulkDelete}\n                          className=\"block w-full text-left px-3 py-2 text-sm text-red-600 hover:bg-red-50\"\n                          disabled={bulkLoading}\n                        >\n                          <FiTrash2 className=\"inline mr-2\" size={14} />\n                          Delete Selected\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Vendors Table */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedVendors.length === filteredVendors.length && filteredVendors.length > 0}\n                    onChange={handleSelectAll}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Vendor\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Category\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Rating\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Contact\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {filteredVendors.map((vendor) => (\n                <tr key={vendor.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedVendors.includes(vendor.id)}\n                      onChange={() => handleSelectVendor(vendor.id)}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">{vendor.name}</div>\n                      <div className=\"text-sm text-gray-500\">{vendor.email}</div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {vendor.category ? (\n                      <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                        {vendor.category}\n                      </span>\n                    ) : (\n                      <span className=\"text-gray-400 italic\">No category</span>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {getStatusBadge(vendor.status)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {renderRating(vendor.rating)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <div className=\"text-sm text-gray-900\">{vendor.contactPerson}</div>\n                      <div className=\"text-sm text-gray-500\">{vendor.phone}</div>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {filteredVendors.length === 0 && (\n        <div className=\"text-center py-8 text-gray-500\">\n          <p>No vendors found matching your filters</p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["VENDORS_COLLECTION","VENDOR_ACTIVITY_COLLECTION","normalizeVendorForSave","raw","_numeric","_raw$bankDetails","_raw$bankDetails2","_raw$bankDetails3","_raw$bankDetails4","_numeric2","numeric","v","undefined","Number","name","String","trim","email","toLowerCase","phone","address","city","state","zipCode","country","website","contactPerson","contactPhone","contactEmail","category","rating","gstNumber","panNumber","bankDetails","accountNumber","ifscCode","bankName","accountHolderName","services","Array","isArray","filter","Boolean","status","notes","establishedYear","employeeCount","annualRevenue","creditLimit","preferredPaymentTerms","taxId","mapVendorFromDoc","docSnap","_data$bankDetails","_data$bankDetails2","_data$bankDetails3","_data$bankDetails4","_data$establishedYear","_data$employeeCount","_data$annualRevenue","_data$creditLimit","_data$preferredPaymen","data","id","createdAt","updatedAt","async","getVendorsOrdered","q","query","collection","db","orderBy","getDocs","docs","map","getAllVendors","getVendorById","snap","getDoc","doc","exists","findDuplicateVendor","excludeId","dupCandidates","emailQ","where","forEach","d","push","phoneQ","type","logVendorActivity","vendorId","action","details","addDoc","timestamp","serverTimestamp","_","createVendor","duplicate","Error","now","ref","updateVendor","updateDoc","deleteVendor","deleteDoc","bulkUpdateVendors","ids","fields","batch","writeBatch","update","commit","bulkDeleteVendors","delete","queryPOsByVendorId","queryJobsByVendorId","computeVendorStats","vendors","stats","vendor","pos","jobs","Promise","all","totalPOs","length","totalJobs","totalSpend","reduce","sum","po","parseFloat","totalAmount","completedJobs","job","pendingPOs","avgRating","lastActivity","Math","max","_po$createdAt","_po$createdAt$toDate","_po$createdAt$toDate$","toDate","call","getTime","_job$createdAt","_job$createdAt$toDate","_job$createdAt$toDate2","e","VendorBulkOperations","showSuccess","showError","showWarning","useNotification","setVendors","useState","selectedVendors","setSelectedVendors","loading","setLoading","bulkLoading","setBulkLoading","searchTerm","setSearchTerm","statusFilter","setStatusFilter","categoryFilter","setCategoryFilter","showBulkActions","setShowBulkActions","showBulkUpdateModal","setShowBulkUpdateModal","showImportModal","setShowImportModal","bulkUpdateData","setBulkUpdateData","tags","importData","setImportData","operationHistory","setOperationHistory","useEffect","fetchVendors","vendorsData","error","console","filteredVendors","matchesSearch","includes","matchesStatus","matchesCategory","handleBulkStatusUpdate","newStatus","logOperation","operation","count","newOperation","Date","user","prev","slice","getUniqueCategories","index","arr","indexOf","sort","renderRating","stars","i","_jsx","FiStar","size","className","children","_jsxs","FiSearch","placeholder","value","onChange","target","FiFilter","FiTag","onClick","disabled","FiMoreVertical","newCategory","handleBulkCategoryUpdate","handleExportSelected","selectedVendorData","csvContent","join","_vendor$createdAt","_vendor$createdAt$toD","_vendor$createdAt$toD2","toLocaleDateString","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","href","download","toISOString","split","click","revokeObjectURL","FiDownload","confirm","FiTrash2","checked","handleSelectAll","handleSelectVendor","active","inactive","pending","charAt","toUpperCase"],"sourceRoot":""}